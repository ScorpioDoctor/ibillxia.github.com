<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: 安全 | Bill's Blog]]></title>
  <link href="http://ibillxia.github.io/blog/tags/an-quan/atom.xml" rel="self"/>
  <link href="http://ibillxia.github.io/"/>
  <updated>2015-03-31T21:07:57+08:00</updated>
  <id>http://ibillxia.github.io/</id>
  <author>
    <name><![CDATA[Bill Xia]]></name>
    <email><![CDATA[ibillxia@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHP字符串安全过滤全攻略]]></title>
    <link href="http://ibillxia.github.io/blog/2010/09/24/PHP-string-filter-methods-for-safety/"/>
    <updated>2010-09-24T13:28:00+08:00</updated>
    <id>http://ibillxia.github.io/blog/2010/09/24/PHP-string-filter-methods-for-safety</id>
    <content type="html"><![CDATA[<p>php安全过滤是防止注入的第一道防线，不得大意。提到PHP的安全过滤，不得不提的两个东西是`set_magic_quotes_runtime` 和 `magic_quotes_gpc`。</p>




<p>`set_magic_quotes_runtime()` 可以让程序员在代码中动态开启或关闭 `magic_quotes_runtime`，`set_magic_quotes_runtime(1)` 表示开启，
`set_magic_quotes_runtime(0)` 则表示关闭。当`set_magic_quotes_runtime(1)`时，从数据库或通过`fread`之类的函数读取的文本，将自动对' "和\自动
加上反斜杠\进行转义，防止溢出。这在对数据库的数据进行转移的时候非常有用。但在一般情况下，应当将其关闭，否则从数据库读取出来的数据单引
号、双引号和反斜杠都会被加上\，导致显示不正常。像Discuz，PHPWind都在公共文件的头部加上一句 `set_magic_quotes_runtime(0);` 强制关闭 
`magic_quotes_runtime` 。</p>




<p>`magic_quotes_gpc` 和 `magic_quotes_runtime` 的区别在于，`magic_quotes_gpc` 是对通过GET、POST、COOKIE传递的数据进行转义，一般在数据入库前
要先进行转义，`magic_quotes_gpc`不能在代码中动态开启或关 闭，需要到`php.ini`将`magic_quotes_gpc`设置为on或off，代码中可以用`get_magic_quotes_gpc`
获取 `magic_quotes_gpc`的状态。当`magic_quotes_gpc`为off时，需要手工对数据进行addslashes，代码如下：</p>


<!--more-->


<p>{% codeblock %}
if (!get_magic_quotes_gpc()) {</p>

<pre><code> add_slashes($_GET);
 add_slashes($_POST);
 add_slashes($_COOKIE);
</code></pre>

<p>}</p>

<p>function add_slashes($string) {</p>

<pre><code> if (is_array($string)) {    
     foreach ($string as $key =&gt; $value) {    
         $string[$key] = add_slashes($value);    
     }    
 } else {    
     $string = addslashes($string);    
 }    
 return $string;    
</code></pre>

<p>}<br/>
{% endcodeblock %}</p>

<p>php防注入函数,字符过滤函数</p>


<p>{% codeblock lang:php %}
//解码
function htmldecode($str)
{</p>

<pre><code>if(empty($str)) return;
if($str=="") return $str;
$str=str_replace("sel&amp;#101;ct","select",$str);
$str=str_replace("jo&amp;#105;n","join",$str);
$str=str_replace("un&amp;#105;on","union",$str);
$str=str_replace("wh&amp;#101;re","where",$str);
$str=str_replace("ins&amp;#101;rt","insert",$str);
$str=str_replace("del&amp;#101;te","delete",$str);
$str=str_replace("up&amp;#100;ate","update",$str);
$str=str_replace("lik&amp;#101;","like",$str);
$str=str_replace("dro&amp;#112;","drop",$str);
$str=str_replace("cr&amp;#101;ate","create",$str);
$str=str_replace("mod&amp;#105;fy","modify",$str);
$str=str_replace("ren&amp;#097;me","rename",$str);
$str=str_replace("alt&amp;#101;r","alter",$str);
$str=str_replace("ca&amp;#115;","cast",$str);
$str=str_replace("&amp;amp;","&amp;",$str);
$str=str_replace("&amp;gt;","&gt;",$str);
$str=str_replace("&amp;lt;","&lt;",$str);
$str=str_replace("&amp;nbsp;",chr(32),$str);
$str=str_replace("&amp;nbsp;",chr(9),$str);
//$str=str_replace("&amp;#160;&amp;#160;&amp;#160;&amp;#160;",chr(9),$str);
$str=str_replace("&amp;",chr(34),$str);
$str=str_replace("&amp;#39;",chr(39),$str);
$str=str_replace("&lt;br /&gt;",chr(13),$str);
$str=str_replace("''","'",$str);
return $str;
</code></pre>

<p>}
//编码
function htmlencode($str)
{</p>

<pre><code>if(empty($str)) return;
if($str=="") return $str;
$str=trim($str);
$str=str_replace("&amp;","&amp;amp;",$str);
$str=str_replace("&gt;","&amp;gt;",$str);
$str=str_replace("&lt;","&amp;lt;",$str);
$str=str_replace(chr(32),"&amp;nbsp;",$str);
$str=str_replace(chr(9),"&amp;nbsp;",$str);
//$str=str_replace(chr(9),"&amp;#160;&amp;#160;&amp;#160;&amp;#160;",$str);
$str=str_replace(chr(34),"&amp;",$str);
$str=str_replace(chr(39),"&amp;#39;",$str);
$str=str_replace(chr(13),"&lt;br /&gt;",$str);
$str=str_replace("'","''",$str);
$str=str_replace("select","sel&amp;#101;ct",$str);
$str=str_replace("join","jo&amp;#105;n",$str);
$str=str_replace("union","un&amp;#105;on",$str);
$str=str_replace("where","wh&amp;#101;re",$str);
$str=str_replace("insert","ins&amp;#101;rt",$str);
$str=str_replace("delete","del&amp;#101;te",$str);
$str=str_replace("update","up&amp;#100;ate",$str);
$str=str_replace("like","lik&amp;#101;",$str);
$str=str_replace("drop","dro&amp;#112;",$str);
$str=str_replace("create","cr&amp;#101;ate",$str);
$str=str_replace("modify","mod&amp;#105;fy",$str);
$str=str_replace("rename","ren&amp;#097;me",$str);
$str=str_replace("alter","alt&amp;#101;r",$str);
$str=str_replace("cast","ca&amp;#115;",$str);
return $str;
</code></pre>

<p>}
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[伪造IP地址的原理]]></title>
    <link href="http://ibillxia.github.io/blog/2010/08/31/the-elements-of-ip-faking/"/>
    <updated>2010-08-31T09:41:00+08:00</updated>
    <id>http://ibillxia.github.io/blog/2010/08/31/the-elements-of-ip-faking</id>
    <content type="html"><![CDATA[<p>入侵者使用假IP地址发送包，利用基于IP地址证实的应用程序。其结果是未授权的远端用户进入带有防火墙的主机系统。</p>




<p>假设有两台主机A、B和入侵者控制的主机X。假设B授予A某些特权，使得A能够获得B所执行的一些操作。X的目标就是得到与B相同的权利。
为了实现该目标，X必须执行两步操作：首先，与B建立一个虚假连接；然后，阻止A向B报告网络证实系统的问题。主机X必须假造A的IP地址，
从而使B相信从X发来的包的确是从A发来的。</p>




<p>我们同时假设主机A和B之间的通信遵守TCP／IP的三次握手机制。握手方法是：</p>


<p>{% codeblock %}
A->：SYN（序列号=M）
B->A：SYN（序列号＝N），ACK（应答序号=M+1）
A->B：ACK（应答序号＝N+1）
{% endcodeblock %}</p>

<!--more-->


<p>主机X伪造IP地址步骤如下：首先，X冒充A，向主机B发送一个带有随机序列号的SYN包。主机B响应，向主机A发送一个带有应答号的SYN+ACK包、
该应答号等于原序列号加1。同时，主机B产生自己发送包序列号，并将其与应答号一起发送。为了完成三次握手，主机X需要向主</p>




<p>机B回送一个应答包，其应答号等于主机B向主机A发送的包序列号加1。假设主机X与A和B不同在一个子网内，则不能检测到B的包，
主机X只有算出B的序列号，才能创建TCP连接。其过程描述如下：</p>


<p>{% codeblock %}
X->B：SYN（序列号=M），SRC=A
B->A：SYN（序列号=N），ACK（应答号=M+1）
X->B：ACK（应答号＝N+1），SRC＝A
{% endcodeblock %}</p>

<p>同时，主机X应该阻止主机A响应主机B的包。为此，X可以等到主机A因某种原因终止运行，或者阻塞主机A的操作系统协议部分，使它不能响应主机B。
一旦主机X完成了以上操作，它就可以向主机B发送命令。主机B将执行这些命令，认为他们是由合法主机A发来的。</p>

]]></content>
  </entry>
  
</feed>