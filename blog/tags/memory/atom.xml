<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Memory | Bill's Blog]]></title>
  <link href="http://ibillxia.github.io/blog/tags/memory/atom.xml" rel="self"/>
  <link href="http://ibillxia.github.io/"/>
  <updated>2014-05-11T23:58:41+08:00</updated>
  <id>http://ibillxia.github.io/</id>
  <author>
    <name><![CDATA[Bill Xia]]></name>
    <email><![CDATA[ibillxia@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C++ 应用程序性能优化之 new/delete 操作符]]></title>
    <link href="http://ibillxia.github.io/blog/2014/05/11/cpp-program-optimization-new-delete-operator/"/>
    <updated>2014-05-11T20:33:00+08:00</updated>
    <id>http://ibillxia.github.io/blog/2014/05/11/cpp-program-optimization-new-delete-operator</id>
    <content type="html"><![CDATA[<h2>1.概述</h2>

<p>C++ 程序的存储空间可以分为静态/全局存储区、栈区和堆区。下图展示了一个典型的Linux C/C++ 程序内存空间布局：</p>

<center><img src="/images/2014/IMAG2014051101.png"></center>


<p>其中，每一部分的具体涵义如下：<br/>
- <strong>代码段（.text）</strong>：这里存放的是CPU要执行的指令。代码段是可共享的，相同的代码在内存中只会有一个拷贝，同时这个段是<strong>只读</strong>的，防止程序由于错误而修改自身的指令。<br/>
- <strong>初始化数据段（.data）</strong>：这里存放的是程序中需要明确赋初始值的变量，例如位于所有函数之外的全局变量：<code>int val=100;</code> 。 需要强调的是，以上两段都是位于程序的可执行文件中，内核在调用 exec 函数启动该程序时从源程序文件中读入。<br/>
- <strong>未初始化数据段（.bss）</strong>：位于这一段中的数据，内核在执行该程序前，将其初始化为0或者null。例如出现在任何函数之外的全局变量：<code>int sum;</code><br/>
- <strong>堆（Heap）</strong>：这个段用于在程序中进行动态内存申请，例如经常用到的 malloc，new 系列函数就是从这个段中申请内存。<br/>
- <strong>栈（Stack）</strong>：函数中的局部变量以及在函数调用过程中产生的临时变量都保存在此段中。<br/>
静态/全局存储区和栈区一般在程序编译阶段决定；而堆区则随着程序的运行而动态变化，每一次程序运行都会有不同的行为，因此动态内存管理对于一个程序在运行过程中占用的内存大小及程序运行性能有非常重要的影响。 本文主要探讨在C++中如何管理动态内存，以及如何使用 C++ 的语言特性来提高动态内存的管理效率，减少错误的发生。</p>

<!-- more -->


<h2>2. new/delete 操作符</h2>

<p>一般来说 C++ 的运行库提供了默认的全局 <code>new/new[]</code> 和 <code>delete/delete[]</code> 的实现，程序也可以用自定义的实现来取代运行库的实现。 下面是 C++ 标准中定义的 <code>new/new[]</code> 和 <code>delete/delete[]</code> 的声明（位于 <code>include/c++/new</code> 文件中）：</p>

<p>```
namespace std {
  class bad_alloc : public exception {</p>

<pre><code>public:
  bad_alloc() throw() { }
  virtual ~bad_alloc() throw();
  virtual const char* what() const throw();
</code></pre>

<p>  };
  struct nothrow_t { };
  extern const nothrow_t nothrow;
  typedef void (*new_handler)();
  new_handler set_new_handler(new_handler) throw();
} // namespace std</p>

<p>void<em> operator new(std::size_t) throw (std::bad_alloc);  // (1)
void</em> operator new<a href="std::size_t"></a> throw (std::bad_alloc);
void operator delete(void<em>) throw();
void operator delete<a href="void*"></a> throw();
void</em> operator new(std::size_t, const std::nothrow_t&amp;) throw();  // (2)
void<em> operator new<a href="std::size_t,%20const%20std::nothrow_t&amp;"></a> throw();
void operator delete(void</em>, const std::nothrow_t&amp;) throw();
void operator delete<a href="void*,%20const%20std::nothrow_t&amp;"></a> throw();
// Default placement versions of operator new.
inline void<em> operator new(std::size_t, void</em> <strong>p) throw() { return </strong>p; }  // (3)
inline void<em> operator new<a href="std::size_t,%20void*%20__p"></a> throw() { return __p; }
// Default placement versions of operator delete.
inline void  operator delete  (void</em>, void*) throw() { }
inline void  operator delete<a href="void*,%20void*"></a> throw() { }
```</p>

<p>其中最后的 <code>inline</code> 函数是 <code>placement</code> 版本的 new/delete 操作，其特点在于分配的内存块的起始地址由用户给定（通过参数 <code>void* __p</code>）。 而前面两种 <code>new/delete</code> （(1)和(2)处）是系统决定待分配内存块的起始地址，区别在于：第一个在分配失败是会抛出 <code>bad_alloc</code> 异常（这是C++标准要求的）；而第二个则不抛出异常，返回0。 很多应用程序都没有处理内存分配的失败情况，但相对于一个需要长期稳定运行的系统来说，这种处理是必不可少的。 应用程序可以通过捕获 <code>bad_alloc</code> 异常或者检查返回值来检查内存分配是否成功，而更好的方法是使用C++中的 <code>new_handler()</code> 函数。 C++规定 <code>new_handler</code> 要执行如下操作中的一种：</p>

<ul>
<li>使 <code>new</code> 有更多的内存可用，然后返回</li>
<li>抛出一个 <code>bad_alloc</code> 或其派生类的异常</li>
<li>调用 <code>abort()</code> 或者 <code>exit()</code> 退出</li>
</ul>


<p>下面看一个例子，看看如何使用 <code>new_handler</code> 处理内存分配失败的情况：</p>

<p>```</p>

<h1>include<new></h1>

<h1>include<cstdio></h1>

<p>using namespace std;
char *gPool = NULL;
void my_new_handler();</p>

<p>int main(){</p>

<pre><code>set_new_handler(my_new_handler);
gPool = new char[100*1024*1024];
if(gPool!=NULL){
    printf("Preserve 100MB memory at %x.\n",gPool);
}
char *p = NULL;
for(int i=0;i&lt;20;i++){
    p = new char[100*1024*1024];
    printf("%d * 100M, p = %x\n",i+1,p);
}
printf("Done.\n");
return 0;
</code></pre>

<p>}</p>

<p>void my_new_handler(){</p>

<pre><code>if(gPool!=NULL){
    printf("try to get more memory...\n");
    delete[] gPool;
    gPool = NULL;
    return;
}else{
    printf("I can not help...\n");
    throw bad_alloc();
}
return;
</code></pre>

<p>}
```</p>

<p>在 Windows 上编译并运行，得到如下输出：</p>

<p>```
Preserve 100MB memory at 980020.
1 * 100M, p = 6d90020
2 * 100M, p = d1a0020
3 * 100M, p = 135b0020
4 * 100M, p = 199c0020
5 * 100M, p = 1fdd0020
6 * 100M, p = 261e0020
7 * 100M, p = 2c5f0020
8 * 100M, p = 32a00020
9 * 100M, p = 38e10020
10 * 100M, p = 3f220020
11 * 100M, p = 45630020
12 * 100M, p = 4ba40020
13 * 100M, p = 51e50020
14 * 100M, p = 58260020
15 * 100M, p = 5e670020
16 * 100M, p = 64a80020
17 * 100M, p = 776c0020
try to get more memory...
18 * 100M, p = 980020
I can not help...
terminate called after throwing an instance of 'std::bad_alloc'
  what():  std::bad_alloc</p>

<p>This application has requested the Runtime to terminate it in an unusual way.
Please contact the application's support team for more information.
```</p>

<p>在 Windows 的 win32 程序中，一个进程可以访问的内存空间是 4GB，但可以用来动态分配的最大内存是 2GB，因而上面的程序执行到第18次（为神马不是第19次？）动态内存分配时由于内存不够，调用了 <code>my_new_handler</code> 获得了内存，而当执行第19次内存分配时，<code>gPool</code> 已被分配，于是 <code>my_new_handler</code> 中抛出了 <code>bad_alloc</code> 异常，导致程序退出。</p>
]]></content>
  </entry>
  
</feed>