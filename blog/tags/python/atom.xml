<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Python | Bill's Blog]]></title>
  <link href="http://ibillxia.github.com/blog/tags/python/atom.xml" rel="self"/>
  <link href="http://ibillxia.github.com/"/>
  <updated>2013-05-15T19:51:12+08:00</updated>
  <id>http://ibillxia.github.com/</id>
  <author>
    <name><![CDATA[Bill Xia]]></name>
    <email><![CDATA[ibillxia@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[语音信号处理之时域分析-音量及其Python实现]]></title>
    <link href="http://ibillxia.github.com/blog/2013/05/15/audio-signal-process-time-domain-volume-python-realization/"/>
    <updated>2013-05-15T19:36:00+08:00</updated>
    <id>http://ibillxia.github.com/blog/2013/05/15/audio-signal-process-time-domain-volume-python-realization</id>
    <content type="html"><![CDATA[<h2>1.概述（Introduction）</h2>


<p>本文主要介绍语音信号时域的4个基本特征及其Python实现，这4个基本特征是：</br>
(1)音量（Volume）；</br>
(2)过零率（Zero-Crossing-Rate）；</br>
(3)音高（Pitch）；</br>
(4)音色（Timbre）。
</p>




<h2>2.音量（Volume）</h2>


<p>音量代表声音的强度，可由一个窗口或一帧内信号振幅的大小来衡量，一般有两种度量方法：</br>
（1）每个帧的振幅的绝对值的总和：
<center>$volume = \sum_{i=1}^{n}|s_{i}|$.</center>
其中$s_{i}$为第该帧的$i$个采样点，$n$为该帧总的采样点数。这种度量方法的计算量小，但不太符合人的听觉感受。</br>
（2）幅值平方和的常数对数的10倍：
<center>$volume = 10 * log_{10}\sum_{i=1}^{n}s_{i}^{2}$.</center>
它的单位是分贝（Decibels），是一个对数强度值，比较符合人耳对声音大小的感觉，但计算量稍复杂。
</p>


<!--more-->


<p>音量计算的Python实现如下：</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import wave
</span><span class='line'>import math
</span><span class='line'>import numpy as np&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>definition 1&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>def calVolume(waveData, frameSize, overLap):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>wlen = len(waveData)
</span><span class='line'>step = frameSize - overLap
</span><span class='line'>frameNum = math.ceil(wlen/step)
</span><span class='line'>volume = np.zeros((frameNum,1))
</span><span class='line'>for i in range(frameNum):
</span><span class='line'>    curFrame = waveData[np.arange(i*step,min(i*step+frameSize,wlen))]
</span><span class='line'>    curFrame = curFrame - curFrame.mean() # zero-justified
</span><span class='line'>    volume[i] = sum(abs(curFrame))
</span><span class='line'>return volume
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;h1>definition 2&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>def calVolumeDB(waveData, frameSize, overLap):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>wlen = len(waveData)
</span><span class='line'>step = frameSize - overLap
</span><span class='line'>frameNum = math.ceil(wlen/step)
</span><span class='line'>volume = np.zeros((frameNum,1))
</span><span class='line'>for i in range(frameNum):
</span><span class='line'>    curFrame = waveData[np.arange(i*step,min(i*step+frameSize,wlen))]
</span><span class='line'>    curFrame = curFrame - curFrame.mean() # zero-justified
</span><span class='line'>    curFrame.shape = -1
</span><span class='line'>    sumFrame = np.dot(curFrame,curFrame)
</span><span class='line'>    volume[i] = 10*np.log10(sumFrame)
</span><span class='line'>return volume
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>对于给定语音文件aeiou.wav，利用上面的函数计算音量曲线的代码如下：</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import wave
</span><span class='line'>import math
</span><span class='line'>import pylab as pl
</span><span class='line'>import numpy as np&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>============ test the algorithm =============&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>read wave file and get parameters.&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>fw = wave.open('aeiou.wav','rb')
</span><span class='line'>params = fw.getparams()
</span><span class='line'>print(params)
</span><span class='line'>nchannels, sampwidth, framerate, nframes = params[:4]
</span><span class='line'>str_data = fw.readframes(nframes)
</span><span class='line'>wave_data = np.fromstring(str_data, dtype=np.short)
</span><span class='line'>wave_data.shape = -1, 1&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>wave_data = wave_data.T&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>fw.close()&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>calculate volume&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>frameSize = 256
</span><span class='line'>overLap = 128
</span><span class='line'>volume11 = calVolume(wave_data,frameSize,overLap)
</span><span class='line'>volume12 = calVolumeDB(wave_data,frameSize,overLap)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>plot the wave&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>time = np.arange(0, nframes) * (1.0 / framerate)
</span><span class='line'>time2 = np.arange(0, len(volume11)) * (1.0 / framerate)
</span><span class='line'>pl.subplot(311)
</span><span class='line'>pl.plot(time, wave_data)
</span><span class='line'>pl.ylabel("Amplitude")
</span><span class='line'>pl.subplot(312)
</span><span class='line'>pl.plot(time2, volume11)
</span><span class='line'>pl.ylabel("adsSum")
</span><span class='line'>pl.subplot(313)
</span><span class='line'>pl.plot(time2, volume12, c="g")
</span><span class='line'>pl.ylabel("Decibel")
</span><span class='line'>pl.xlabel("time (seconds)")
</span><span class='line'>pl.show()</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>运行以上程序得到下图：
<center><img src="/images/2013/IMAG2013051501.png"></center>
</p>




<h2>参考（References）</h2>


<p>[1]Volume (音量):http://neural.cs.nthu.edu.tw/jang/books/audiosignalprocessing/basicFeatureVolume.asp?title=5-2%20Volume%20(%AD%B5%B6q)</br>
[2]用Python做科学计算-声音的输入输出:http://hyry.dip.jp:8000/pydoc/wave_pyaudio.html</p>

]]></content>
  </entry>
  
</feed>
