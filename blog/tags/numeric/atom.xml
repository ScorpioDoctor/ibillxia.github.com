<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: numeric | Bill's Blog]]></title>
  <link href="http://ibillxia.github.io/blog/tags/numeric/atom.xml" rel="self"/>
  <link href="http://ibillxia.github.io/"/>
  <updated>2014-12-09T20:34:44+08:00</updated>
  <id>http://ibillxia.github.io/</id>
  <author>
    <name><![CDATA[Bill Xia]]></name>
    <email><![CDATA[ibillxia@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[深入理解STL源码(5.2) 算法之数值算法]]></title>
    <link href="http://ibillxia.github.io/blog/2014/10/19/insight-into-stl-5-algorithm-2-numeric-algorithms/"/>
    <updated>2014-10-19T20:28:00+08:00</updated>
    <id>http://ibillxia.github.io/blog/2014/10/19/insight-into-stl-5-algorithm-2-numeric-algorithms</id>
    <content type="html"><![CDATA[<p>本文主要介绍STL中的数值算法，主要涉及到的源码文件有 <code>stl_numberic.h</code>、<code>numeric</code>、<code>stl_relops.h</code> 等。</p>

<p>STL 数值算法主要包含以下几个算法（来自<a href="http://www.cplusplus.com/reference/numeric/">C++文档</a>）：</p>

<ul>
<li>accumulate: Accumulate values in range</li>
<li>adjacent_difference: Compute adjacent difference of range</li>
<li>inner_product: Compute cumulative inner product of range</li>
<li>partial_sum: Compute partial sums of range</li>
<li>iota: Store increasing sequence</li>
<li>power: power(x,n) 1 multiply by x n times (not in C++ standard)</li>
</ul>


<p>下面一一介绍每个算法的实现。</p>

<h3>1. accumulate</h3>

<p>该算法计算 init 和区间 [first, last) 内所有元素的总和。注意，必须提供 init 的初始值，这样即使 first=last 区间为空，仍能得到一个明确定义的值。当 init=0 时，即为计算 [first, last) 区间内所有元素的总和。具体实现有两个版本，如下：</p>

<p>```
template <class _InputIterator, class _Tp>
<em>Tp accumulate(</em>InputIterator <strong>first, _InputIterator </strong>last, <em>Tp <strong>init){
  </strong>STL_REQUIRES(</em>InputIterator, _InputIterator); // concept check
  for ( ; <strong>first != </strong>last; ++__first)</p>

<pre><code>__init = __init + *__first; // 求和
</code></pre>

<p>  return <strong>init;
}
template <class _InputIterator, class _Tp, class _BinaryOperation>
<em>Tp accumulate(</em>InputIterator </strong>first, <em>InputIterator __last, </em>Tp <strong>init, _BinaryOperation </strong>binary_op){
  <strong>STL_REQUIRES(<em>InputIterator, </em>InputIterator); // concept check
  for ( ; </strong>first != <strong>last; ++</strong>first)</p>

<pre><code>__init = __binary_op(__init, *__first); // 指定二元操作
</code></pre>

<p>  return __init;
}
```</p>

<!-- more -->


<p>第二个版本通过仿函数参数 <em>binary_op 指定操作类型，可以实现其他方式的累计，例如累乘等（令init=1，</em>binary_op=multiply）。</p>

<h3>2. adjacent_difference</h3>

<p>该算法用来计算区间 [first, last) 中相邻元素的差（或其他指定运算，结果[i]=当前元素[i]的值-前驱元素[i-1]的值），该算法也有两个版本，一个是指定运算为差，另一个传入仿函数(参数 _binary_op)指定具体运算，这里贴出第二个版本：</p>

<p>```
template <class _InputIterator, class _OutputIterator, class _Tp, class _BinaryOperation>
<em>OutputIterator
__adjacent_difference(</em>InputIterator <strong>first, _InputIterator </strong>last,</p>

<pre><code>                  _OutputIterator __result, _Tp*, _BinaryOperation __binary_op) {
</code></pre>

<p>  _Tp <strong>value = *</strong>first;
  while (++<strong>first != </strong>last) { // 先 ++ ，再比较</p>

<pre><code>_Tp __tmp = *__first; // 取第i+1个元素的值
*++__result = __binary_op(__tmp, __value);
__value = __tmp; // 保存第i个元素的值
</code></pre>

<p>  }
  return ++<strong>result;
}
template <class _InputIterator, class _OutputIterator, class _BinaryOperation>
<em>OutputIterator adjacent_difference(</em>InputIterator </strong>first, _InputIterator __last,</p>

<pre><code>                _OutputIterator __result, _BinaryOperation __binary_op) {
</code></pre>

<p>  if (<strong>first == </strong>last) return <strong>result; // 区间为空，直接返回
  *</strong>result = *<strong>first; // 第一个元素没有前驱，直接将当前值赋给结果
  return </strong>adjacent_difference(<strong>first, </strong>last, __result,</p>

<pre><code>                           __VALUE_TYPE(__first), __binary_op);
</code></pre>

<p>}
```</p>

<h3>3. inner_product</h3>

<p>该算法实现区间 [first1, last1) 和区间 [first2, first2+(last1-first1) ) 的一般内积（generalized inner product），公式为$init = init+(<em>i) * (</em>(first2+(i-first1)))$同样需要提供 init 的值（理由同accumulate）。另外还有一个版本，提供两个仿函数，分别指定上面公式中的加法和乘法。第一个版本的代码如下：
```
template <class _InputIterator1, class _InputIterator2, class _Tp>
<em>Tp inner_product(</em>InputIterator1 <strong>first1, _InputIterator1 </strong>last1,</p>

<pre><code>              _InputIterator2 __first2, _Tp __init) {
</code></pre>

<p>  for ( ; <strong>first1 != </strong>last1; ++<strong>first1, ++</strong>first2)</p>

<pre><code>__init = __init + (*__first1 * *__first2);
</code></pre>

<p>  return __init;
}
```
可以看到，这里其实没有判断第二个区间是否越界，所以在调用时需要我们自己注意，但一般来说计算内积的两个区间都是相同长度的。</p>

<h3>4. partial_sum</h3>

<p>该算法用来计算局部总和，将 <code>*first</code> 赋值给 <code>*result</code>，将 <code>*frist+*(first+1)</code> 赋值给 <code>*(result+1)</code>，依次类推，即有 <code>result[i]=sum(*first..*(first+i))</code>，这是默认的操作为加法的版本，还有一个版本可以通过仿函数指定操作，以下是默认版本：
```
template <class _InputIterator, class _OutputIterator, class _Tp>
<em>OutputIterator __partial_sum(</em>InputIterator <strong>first, _InputIterator </strong>last,</p>

<pre><code>          _OutputIterator __result, _Tp*) {
</code></pre>

<p>  _Tp <strong>value = *</strong>first;
  while (++<strong>first != </strong>last) {</p>

<pre><code>__value = __value + *__first;
*++__result = __value; // result 先++，再提领、赋值
</code></pre>

<p>  }
  return ++<strong>result;
}
template <class _InputIterator, class _OutputIterator>
<em>OutputIterator partial_sum(</em>InputIterator </strong>first, _InputIterator __last,</p>

<pre><code>        _OutputIterator __result){
</code></pre>

<p>  if (<strong>first == </strong>last) return <strong>result;
  *</strong>result = *<strong>first; // 第一项直接赋值
  return </strong>partial_sum(<strong>first, </strong>last, <strong>result, </strong>VALUE_TYPE(__first));
}
```</p>

<h3>5. itoa</h3>

<p>该算法不是C++/STL标准，主要作用是将区间 [first, last) 的值赋值为 value,value+1,value+2,... 如下：
```
template <class _ForwardIter, class _Tp>
void iota(<em>ForwardIter __first, </em>ForwardIter <strong>last, _Tp </strong>value){
  while (<strong>first != </strong>last)</p>

<pre><code>*__first++ = __value++;
</code></pre>

<p>}
```</p>

<h3>6. power</h3>

<p>该算法也不是C++/STL标准，作用在于实现 x 的 n 次方的计算，通过将n分解为2的幂来计算。还有一个版本是用户可以指定运算，而不一定是乘法。默认版本如下：
```
template <class _Tp, class _Integer, class _MonoidOperation>
<em>Tp __power(</em>Tp <strong>x, _Integer </strong>n, _MonoidOperation <strong>opr){ // func1：幂方的具体实现
  if (</strong>n == 0)</p>

<pre><code>return identity_element(__opr);
</code></pre>

<p>  else {</p>

<pre><code>while ((__n &amp; 1) == 0) { // 二进制末尾为0
  __n &gt;&gt;= 1; // n/2
  __x = __opr(__x, __x); // 乘方
}
_Tp __result = __x;
__n &gt;&gt;= 1;
while (__n != 0) {
  __x = __opr(__x, __x); // 乘方
  if ((__n &amp; 1) != 0) // 二进制末尾为1
    __result = __opr(__result, __x); // 乘入结果
  __n &gt;&gt;= 1;
}
return __result;
</code></pre>

<p>  }
}
template <class _Tp, class _Integer>
inline <em>Tp __power(</em>Tp <strong>x, _Integer </strong>n){ // func2
  return <strong>power(</strong>x, <strong>n, multiplies<_Tp>()); // 调用func3
}
template <class _Tp, class _Integer, class _MonoidOperation>
inline <em>Tp power(</em>Tp </strong>x, <em>Integer __n, </em>MonoidOperation <strong>opr){ // func3
  return </strong>power(<strong>x, </strong>n, <strong>opr); // 调用func1
}
template <class _Tp, class _Integer>
inline <em>Tp power(</em>Tp </strong>x, _Integer <strong>n){
  return </strong>power(<strong>x, </strong>n); // 调用func2
}
```
饶了几道弯，主要看 func1实现即可。</p>
]]></content>
  </entry>
  
</feed>