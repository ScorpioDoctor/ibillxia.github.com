<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Program | Bill's Blog]]></title>
  <link href="http://ibillxia.github.com/blog/categories/program/atom.xml" rel="self"/>
  <link href="http://ibillxia.github.com/"/>
  <updated>2013-06-29T12:03:46+08:00</updated>
  <id>http://ibillxia.github.com/</id>
  <author>
    <name><![CDATA[Bill Xia]]></name>
    <email><![CDATA[ibillxia@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用Windows API实现一个简单的录音程序]]></title>
    <link href="http://ibillxia.github.com/blog/2013/06/04/a-simple-code-for-wave-recording-using-windows-api/"/>
    <updated>2013-06-04T23:59:00+08:00</updated>
    <id>http://ibillxia.github.com/blog/2013/06/04/a-simple-code-for-wave-recording-using-windows-api</id>
    <content type="html"><![CDATA[<p>本文介绍如何使用Windows API来录制语音信号兵保存到wave文件中，主要用到三个结构体和几个wave开头的API函数（在Winmm.lib文件中）。其中三个结构体是WAVEFORMATEX、WAVEHDR、MMTIME，其详细定义都在MMSystem.h中定义，
可以转到定义看其详细内容及每一项的英文注释。用到的API函数的详细用法可以参见MSDN： http://msdn.microsoft.com/en-us/library/windows/desktop/dd743847(v=vs.85).aspx
详细的使用过程请看下文的源代码，这是一个Win32 Application，需要手动添加Winmm.lib的依赖。</p>




<!--more-->




<p>实例程序</p>


<p>{% codeblock %}
// <strong><strong><strong><strong><strong><strong><strong><strong><strong><em> FileName: WinMain.cpp </em></strong></strong></strong></strong></strong></strong></strong></strong></strong>**********
// 该源程序需要加入到 VC6 的 Win32 Application 的 empty Project 中
// 对于工程的 Link 选项，至少要包含以下库: msvcrt.lib Winmm.lib</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;atlstr.h></h1>

<h1>include &lt;windows.h></h1>

<h1>include &lt;Mmsystem.h></h1>

<h1>pragma comment(lib,"Winmm.lib")</h1>

<p>char lpTemp[256];</p>

<p>DWORD FCC(LPSTR lpStr)
{</p>

<pre><code>DWORD Number = lpStr[0] + lpStr[1] *0x100 + lpStr[2] *0x10000 + lpStr[3] *0x1000000 ;
return Number;
</code></pre>

<p>}</p>

<p>int WINAPI WinMain( HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow )
{</p>

<pre><code>DWORD datasize = 48000;

// 设置录音采样参数
WAVEFORMATEX waveformat;
waveformat.wFormatTag=WAVE_FORMAT_PCM; // 指定录音格式
waveformat.nChannels=1;
waveformat.nSamplesPerSec=8000;
waveformat.nBlockAlign=1;
waveformat.wBitsPerSample=8;
waveformat.cbSize=0;
waveformat.nAvgBytesPerSec=waveformat.nSamplesPerSec*waveformat.wBitsPerSample/8;

sprintf(lpTemp,"WAVEFORMATEX size = %lu", sizeof(WAVEFORMATEX));
MessageBox(NULL,CString(lpTemp),CString("提示"),MB_OK);

HWAVEIN m_hWaveIn;
if ( !waveInGetNumDevs() )
{
    MessageBox(NULL,CString("没有可以使用的 WaveIn 通道"),CString("提示"),MB_OK);
    return 0;
}

// 打开录音设备
int res = waveInOpen(&amp;m_hWaveIn,WAVE_MAPPER, &amp;waveformat, (DWORD)NULL,0L,CALLBACK_WINDOW); 
if ( res != MMSYSERR_NOERROR )
{
   sprintf(lpTemp, "打开 waveIn 通道失败，Error_Code = 0x%x", res );
   MessageBox(NULL,CString(lpTemp),CString("提示"),MB_OK);
   return 0;
}

WAVEHDR m_pWaveHdr;
m_pWaveHdr.lpData = (char *)GlobalLock( GlobalAlloc(GMEM_MOVEABLE|GMEM_SHARE, datasize) );
memset(m_pWaveHdr.lpData, 0, datasize );
m_pWaveHdr.dwBufferLength = datasize;
m_pWaveHdr.dwBytesRecorded = 0;
m_pWaveHdr.dwUser = 0;
m_pWaveHdr.dwFlags = 0;
m_pWaveHdr.dwLoops = 0;
sprintf( lpTemp, "WAVEHDR size = %lu", sizeof(WAVEHDR) );
MessageBox(NULL,CString(lpTemp),CString("提示"),MB_OK);

// 准备内存块录音
int resPrepare = waveInPrepareHeader( m_hWaveIn, &amp;m_pWaveHdr, sizeof(WAVEHDR) ); 
if ( resPrepare != MMSYSERR_NOERROR) 
{
    sprintf(lpTemp, "不能开辟录音头文件，Error_Code = 0x%03X", resPrepare );
    MessageBox(NULL,CString(lpTemp),CString("提示"),MB_OK);
    return 0;
}

resPrepare = waveInAddBuffer( m_hWaveIn, &amp;m_pWaveHdr, sizeof(WAVEHDR) );
if ( resPrepare != MMSYSERR_NOERROR) 
{
    sprintf(lpTemp, "不能开辟录音用缓冲，Error_Code = 0x%03X", resPrepare );
    MessageBox(NULL,CString(lpTemp),CString("提示"),MB_OK);
    return 0;
}

if (! waveInStart(m_hWaveIn) ) 
{
    MessageBox(NULL,CString("开始录音"),CString("提示"),MB_OK);
}
else 
{
    MessageBox(NULL,CString("开始录音失败"),CString("提示"),MB_OK);
    return 0;
}
Sleep(30000);

MMTIME mmt;
mmt.wType = TIME_BYTES;
sprintf( lpTemp, "sizeof(MMTIME) = %d, sizeof(UINT) = %d", sizeof(MMTIME), sizeof(UINT) );
MessageBox(NULL,CString(lpTemp),CString("提示"),MB_OK);

if (! waveInGetPosition(m_hWaveIn, &amp;mmt, sizeof(MMTIME)) )
{
    MessageBox(NULL,CString("取得现在音频位置"),CString("提示"),MB_OK);
}
else 
{
    MessageBox(NULL,CString("不能取得音频长度"),CString("提示"),MB_OK);
    return 0;
}

if (mmt.wType != TIME_BYTES) 
{
    MessageBox(NULL,CString("指定的 TIME_BYTES 格式音频长度不支持"),CString("提示"),MB_OK);
    return 0;
}

if (! waveInStop(m_hWaveIn) ) 
{
    MessageBox(NULL,CString("停止录音"),CString("提示"),MB_OK);
}
else  
{
    MessageBox(NULL,CString("停止录音失败"),CString("提示"),MB_OK);
}

if ( waveInReset(m_hWaveIn) ) 
{
    MessageBox(NULL,CString("重置内存区失败"),CString("提示"),MB_OK);
    return 0;
}

m_pWaveHdr.dwBytesRecorded = mmt.u.cb;
DWORD NumToWrite=0;
DWORD dwNumber = 0;
HANDLE FileHandle = CreateFile( CString("myTest.wav"), GENERIC_WRITE, 
    FILE_SHARE_READ, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);

// memset(m_pWaveHdr.lpData, 0, datasize);
dwNumber = FCC("RIFF");
WriteFile(FileHandle, &amp;dwNumber, 4, &amp;NumToWrite, NULL);
dwNumber = m_pWaveHdr.dwBytesRecorded + 18 + 20;
WriteFile(FileHandle, &amp;dwNumber, 4, &amp;NumToWrite, NULL);
dwNumber = FCC("WAVE");
WriteFile(FileHandle, &amp;dwNumber, 4, &amp;NumToWrite, NULL);
dwNumber = FCC("fmt ");
WriteFile(FileHandle, &amp;dwNumber, 4, &amp;NumToWrite, NULL);
dwNumber = 18L;
WriteFile(FileHandle, &amp;dwNumber, 4, &amp;NumToWrite, NULL);
WriteFile(FileHandle, &amp;waveformat, sizeof(WAVEFORMATEX), &amp;NumToWrite, NULL);
dwNumber = FCC("data");
WriteFile(FileHandle, &amp;dwNumber, 4, &amp;NumToWrite, NULL);
dwNumber = m_pWaveHdr.dwBytesRecorded;
WriteFile(FileHandle, &amp;dwNumber, 4, &amp;NumToWrite, NULL);
WriteFile(FileHandle, m_pWaveHdr.lpData, m_pWaveHdr.dwBytesRecorded, &amp;NumToWrite, NULL);
SetEndOfFile(FileHandle);
CloseHandle( FileHandle );  
FileHandle = INVALID_HANDLE_VALUE; // 收尾关闭句柄
MessageBox(NULL,CString("应该已生成 myTest.wav 文件"),CString("提示"),MB_OK);

if ( waveInUnprepareHeader(m_hWaveIn, &amp;m_pWaveHdr, sizeof(WAVEHDR)) ) 
{
    MessageBox(NULL,CString("Un_Prepare Header 失败"),CString("提示"),MB_OK);
}
else 
{
    MessageBox(NULL,CString("Un_Prepare Header 成功"),CString("提示"),MB_OK);
    return 0;
}

if ( GlobalFree(GlobalHandle( m_pWaveHdr.lpData )) ) 
{
    MessageBox(NULL,CString("Global Free 失败"),CString("提示"),MB_OK);
}
else 
{
    MessageBox(NULL,CString("Global Free 成功"),CString("提示"),MB_OK);
    return 0;
}

if (res == MMSYSERR_NOERROR ) // 关闭录音设备
{
    if (waveInClose(m_hWaveIn)==MMSYSERR_NOERROR)
    {
        MessageBox(NULL,CString("正常关闭录音设备"),CString("提示"),MB_OK);
    }
    else
    {
        MessageBox(NULL,CString("非正常关闭录音设备"),CString("提示"),MB_OK);
        return 0;
    }
}

return 0;
</code></pre>

<p>}
// <strong><strong><strong><strong><strong><strong><strong><strong><strong><em> End of File </em></strong></strong></strong></strong></strong></strong></strong></strong></strong>*****
{% endcodeblock %}</p>

<p>这里提供的代码有点杂乱，现已整理成一个小的接口，并提供了一个简单的示例，放在GitHub上：https://github.com/ibillxia/Demo/tree/master/DemoSpeechRecord</p>




<p>参考：</br>
[1]MSDN: http://msdn.microsoft.com/en-us/library/windows/desktop/dd743586(v=vs.85).aspx</br>
[2]基于API的录音机程序: http://www.vckbase.com/index.php/wv/664
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matlab代码优化方法几则]]></title>
    <link href="http://ibillxia.github.com/blog/2012/04/25/matlab-code-optimization/"/>
    <updated>2012-04-25T20:07:00+08:00</updated>
    <id>http://ibillxia.github.com/blog/2012/04/25/matlab-code-optimization</id>
    <content type="html"><![CDATA[<p>1.计算向量、矩阵化，尽量减少for循环</br>
因为MATLAB本来就是矩阵实验室的意思，他提供了极其强大而灵活的矩阵运算能力，你就没必要自己再用自己编写的for循环去实现矩阵运算的功能了。
另外由于matlab是一种解释性语言，所以最忌讳直接使用循环语句。但在有些情况下，使用for循环可以提高程序的易读性，在效率提高不是很明显的
情况下可以选择使用for循环。</p>




<p>2.循环内大数组预先定义--预先分配空间</br>
这一点原则是极其重要的，以至于在编写m程序时编辑器会给出提示“'ver' might be growing inside a loop.Consider prealloacting for speed.”</p>




<p>3.尽可能利用matlab内部提供的函数</br>
因为matlab内部提供的函数绝对是各种问题的最优算法，那写程序都是他们大师级人物写出来的，程序应该说相当高效，有现成的为什么不用那！
这个原则就不用实际的程序测试了。</p>




<p>4. 利用内置函数自动记录运行结果</br>
matlab生成的结果变量只贮存在内存空间中，一旦matlab关闭则会丢失，很多时候需要手工将这些结果存储到我们需要的文件中。事实上，matlab提供
了很多函数可以自动记录结果，如fprintf可以将数据写入txt文件，xlswrite可以将数据写入excel文件等等。这样自动化的命令可以缩减大量时间，
从而提高效率。</p>




<p>5. 在迫不得已要使用较多循环而每一步都很耗时的时候，可以将每一步的结果保存成mat文件，然后在循环的开头用if语句与exist函数进行判断，
如果该文件存在的话，就直接进入下一次循环。这样做的好处是不会因为断电、电脑死机或误操作等原因而重头从第一个循环再次运行。</p>




<p>6. 同时运行多的matlab进程。现在的电脑一般都是多核，一般一个matlab进程会占用一个cpu，因此可以在多核电脑上同时打开多个matlab窗口，
从而执行不同的命令。如四核电脑上可以打开三个matlab窗口分别运行不同的程序，cpu的占用率约为80%，这样既加快了进度，又不会影响电脑的使用。</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[11年浙大复试机试题解]]></title>
    <link href="http://ibillxia.github.com/blog/2012/03/07/11-zju-program-test-solution/"/>
    <updated>2012-03-07T19:56:00+08:00</updated>
    <id>http://ibillxia.github.com/blog/2012/03/07/11-zju-program-test-solution</id>
    <content type="html"><![CDATA[<p>
11年浙大研究生复试机试题解
</p>




<h3>A题：A+B for Matrices （ 九度1001）</h3>


<p>水题</p>


<p>{% codeblock Problem A %}</p>

<h1>include &lt;stdio.h></h1>

<p>int m,n,a[10][10],b[10][10];
int main()
{</p>

<pre><code>int i,j,cnt;
while(scanf("%d",&amp;m)&amp;&amp;m&gt;0){
    scanf("%d",&amp;n);
    for(i=0;i&lt;m;i++)
        for(j=0;j&lt;n;j++)
            scanf("%d",a[i]+j);
    for(i=0;i&lt;m;i++)
        for(j=0;j&lt;n;j++){
            scanf("%d",b[i]+j);
            a[i][j]+=b[i][j];
        }
    cnt=0;
    for(i=0;i&lt;m;i++){
        for(j=0;j&lt;n;j++)
            if(a[i][j])break;
        if(j==n)cnt++;
    }
    for(i=0;i&lt;n;i++){
        for(j=0;j&lt;m;j++)
            if(a[j][i])break;
        if(j==m)cnt++;
    }
    printf("%d\n",cnt);
}
return 0;
</code></pre>

<p>}
{% endcodeblock %}</p>

<!-- more -->


<h3>B题：Grading（ 九度 1002 ）</h3>


<p>继续水题！</p>


<p>{% codeblock Problem B %}</p>

<h1>include &lt;stdio.h></h1>

<p>int main()
{</p>

<pre><code>int p,t,g1,g2,g3,gj,t1,t2;
while(scanf("%d %d %d %d %d %d",&amp;p,&amp;t,&amp;g1,&amp;g2,&amp;g3,&amp;gj)!=EOF){
    if(g1-g2&lt;=t&amp;&amp;g2-g1&lt;=t){printf("%.1f\n",(g1+g2)/2.0);continue;}
    t1=g3&gt;g1 ? g3-g1 : g1-g3;
    t2=g3&gt;g2 ? g3-g2 : g2-g3;
    if(t1&gt;t&amp;&amp;t2&gt;t){printf("%.1f\n",(float)gj);continue;}
    if(t1&lt;=t&amp;&amp;t2&lt;=t) {
        if(g1&lt;g2)g1=g2;
        if(g1&lt;g3)g1=g3;
        printf("%.1f\n",(float)g1);
        continue;
    }
    if(t1&gt;t2)printf("%.1f\n",(g2+g3)/2.0);
    else printf("%.1f\n",(g1+g3)/2.0);
}
return 0;
</code></pre>

<p>}
{% endcodeblock %}</p>

<h3>C题：Median（ 九度 1004）</h3>


<p>再继续水题！</p>


<p>{% codeblock Problem C %}</p>

<h1>include &lt;stdio.h></h1>

<p>long m,n,a[1000000],b[1000000];
int main()
{</p>

<pre><code>int i,j,k,t,mid;
while(scanf("%d",&amp;m)!=EOF){
    for(i=0;i&lt;m;i++)scanf("%d",a+i);
    scanf("%d",&amp;n);
    for(i=0;i&lt;n;i++)scanf("%d",b+i);
    i=j=k=0;t=(m+n+1)/2;
    while(i&lt;m&amp;&amp;j&lt;n&amp;&amp;k&lt;t){
        if(a[i]&gt;b[j]){mid=b[j];j++;}
        else {mid=a[i];i++;}
        k++;
    }
    if(i==m&amp;&amp;k&lt;t){
        while(k&lt;t){j++;k++;}
        mid=b[j-1];
    }else if(j==n&amp;&amp;k&lt;t){
        while(k&lt;t){i++;k++;}
        mid=a[i-1];
    }
    printf("%d\n",mid);
}
return 0;
</code></pre>

<p>}
{% endcodeblock %}</p>

<h3>D题：Graduate Admission（ 九度 1005）</h3>


<p>有点麻烦，要细心！</p>


<p>{% codeblock Problem D %}</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;memory.h></h1>

<p>//m为学校数，n为学生数，k为学生填报的志愿数
//mq[i][0]为学校i计划招生数，mq[i][1]为学校实际招生数，
//mq[i][2] ~ mq[i][mq[i][1]+1]为招收的学生的学号
//ng[i][0]为学生学号，ng[i][1]为学生总成绩，ng[i][2]为学生面试成绩，
//ng[i][2]后面的k个数据是填报的志愿
int m,n,k,mq[100][1000],ng[40000][8];
int cmp1(const void<em>a,const void</em>b){</p>

<pre><code>int *t1,*t2;
t1=(int*)a;t2=(int*)b;
if(t1[1]!=t2[1])return t2[1]-t1[1];
else return t1[2]-t2[2];  //总分相同时，面试成绩高的笔试成绩低
</code></pre>

<p>}
int cmp2(const void<em>a,const void</em>b){return <em>(int</em>)a-<em>(int</em>)b;}
int main()
{</p>

<pre><code>int i,j,t,p,q;
//freopen("in.txt","r",stdin);
//freopen("out.txt","w+",stdout);
while(scanf("%d %d %d",&amp;n,&amp;m,&amp;k)!=EOF){
    memset(mq,0,sizeof(mq));
    memset(ng,0,sizeof(ng));
    //输入部分
    for(i=0;i&lt;m;i++)scanf("%d",mq+i);
    for(i=0;i&lt;n;i++){
        ng[i][0]=i;
        for(j=1;j&lt;k+3;j++)
            scanf("%d",ng[i]+j);
        ng[i][1]=ng[i][1]+ng[i][2];
    }
    //处理部分
    qsort(ng,n,sizeof(ng[0]),cmp1);  //将考生按分数排名
    //debug:输出排名
    //for(i=0;i&lt;n;i++)printf("%2d:%2d %d %d %d\n",i,ng[i][0],ng[i][3],ng[i][4],ng[i][5]);
    for(i=0;i&lt;n;i++){  //将考生按名次分配给各学校
        for(j=3;j&lt;k+3;j++){ //从考生第一志愿开始选学校
            t=ng[i][j];  //排名为i的考生报考的第j-3个学校，学校编号为t
            if(mq[t][0]&gt;0){
                if(mq[t][0]&gt;mq[t][1]){   //在学校招生名额范围内
                    mq[t][1]++;
                    mq[t][mq[t][1]+1]=ng[i][0];  //学校t招收学生ng[i][0]
                    break;
                } else{   //招生名额范围外，排名相同的考生
                    p=mq[t][mq[t][1]+1];  //p为已招收的最后一个考生的学号
                    for(q=0;q&lt;i;q++)   //查找学号为p的考生排名后的位置k
                        if(ng[q][0]==p){p=q;break;}
                        if(ng[p][1]==ng[i][1]&amp;&amp;ng[p][2]==ng[i][2]){  //判断排名是否相同
                        mq[t][1]++;
                        mq[t][mq[t][1]+1]=ng[i][0];   //录取排名相同的考生
                        break;
                    }
                }
            }
        }
    }
    //输出部分
    for(i=0;i&lt;m;i++){ //分配给每个学校的学生，先按学号排序，再输出
        qsort(mq[i]+2,mq[i][1],sizeof(mq[i][2]),cmp2);
        if(mq[i][1]&gt;0)printf("%d",mq[i][2]);
        for(j=3;j&lt;mq[i][1]+2;j++)printf(" %d",mq[i][j]);
        printf("\n");
    }
}
return 0;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>总体来说，这套题比较简单！</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10年浙大复试机试题解]]></title>
    <link href="http://ibillxia.github.com/blog/2012/03/07/10-zju-program-test-solution/"/>
    <updated>2012-03-07T12:08:00+08:00</updated>
    <id>http://ibillxia.github.com/blog/2012/03/07/10-zju-program-test-solution</id>
    <content type="html"><![CDATA[<p>
10年浙大研究生复试机试题解
</p>




<h3>A题：A+B（hdoj3787）（九度1003）</h3>


<p>水题，不解释，直接上代码：</p>


<p>{% codeblock Problem A %}</p>

<h1>include &lt;stdio.h></h1>

<p>long a,b;
int main()
{</p>

<pre><code>int i,f;
char s[30];
while(scanf("%s",s)!=EOF){
    a=b=0;
    if(s[0]=='-'){f=-1;i=1;}
    else {f=1;i=0;}
    while(s[i]){
        if(s[i]!=',')a=a*10+s[i]-'0';
        i++;
    }
    a=a*f;
    getchar();
    scanf("%s",s);
    if(s[0]=='-'){f=-1;i=1;}
    else {f=1;i=0;}
    while(s[i]){
        if(s[i]!=',')b=b*10+s[i]-'0';
        i++;
    }
    b=b*f;
    printf("%d\n",a+b);
}
return 0;
</code></pre>

<p>}
{% endcodeblock %}</p>

<!-- more -->


<h3>B题：ZOJ问题（hdoj3788）（九度1006）</h3>


<p>题目不是很好懂，要仔细阅读，根据题目的三个条件找规律，
最后发现Accepted的字符串应满足如下条件：</br>
设a为第一个z前o的个数，b为z和j之间o的个数，c为j之后o的个数，
则有c=a*b，其中b>0.代码如下：
</p>


<p>{% codeblock Problem B %}</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;string.h></h1>

<p>char s[1001];
int main()
{</p>

<pre><code>int a,b,c;
char *p;
while(scanf("%s",s)!=EOF){
    if(!strcmp(s,"zoj")){printf("Accepted\n");continue;}
    a=b=c=0;
    p=s;
    while(*p=='o'){a++;p++;}
    if(*p=='z'){
        p++;
        while(*p=='o'){b++;p++;}
        if(*p=='j'){
            p++;
            while(*p=='o'){c++;p++;}
            if(!(*p) &amp;&amp; b&gt;0 &amp;&amp; c==a*b){printf("Accepted\n");continue;}
        }
    }
    printf("Wrong Answer\n");
}
return 0;
</code></pre>

<p>}
{% endcodeblock %}</p>

<h3>C题：奥运排序问题（hdoj3789）（九度1007）</h3>


<p>排序问题，题目不难，但要把题目理解正确、做正确却不是那么容易。
注意（1）只需要给M个（而不是N个）国家排序；
（2）最后输出结果要按输入的顺序给出（hdoj，但在九度上是要按照国家的编号小到大顺序输出）。
hdoj AC的代码如下：</p>


<p>{% codeblock Problem C %}</p>

<h1>include&lt;stdio.h></h1>

<h1>include&lt;stdlib.h></h1>

<h1>include&lt;string.h></h1>

<h1>include<algorithm></h1>

<p>using namespace std;</p>

<p>const int INF=10005;
struct node{</p>

<pre><code>float gold,medal,gm,mm,man;
int no,fs,pm,bc;
</code></pre>

<p>}a[10005],b[10005]; //fs表示排序方式，bc表示本次排名，pm表示最终排名</p>

<p>int com1(node a,node b){return a.gold>b.gold;}
int com2(node a,node b){return a.medal>b.medal;}
int com3(node a,node b){return a.gm>b.gm;}
int com4(node a,node b){return a.mm>b.mm;}
int com5(node a,node b){return a.no&lt;b.no;}</p>

<p>int main()
{</p>

<pre><code>int i,t,m,n;
//freopen("in.txt","r",stdin);
//freopen("out2.txt","w+",stdout);
while(scanf("%d%d",&amp;n,&amp;m)!=EOF){
    for(i=1;i&lt;=n;i++){
        scanf("%f%f%f",&amp;a[i].gold,&amp;a[i].medal,&amp;a[i].man);
        a[i].gm=a[i].gold/a[i].man;
        a[i].mm=a[i].medal/a[i].man;
        a[i].no=i;a[i].pm=INF;
    }
    for(i=1;i&lt;=m;i++){//选出要排序的m个数给b
        scanf("%d",&amp;t);
        b[i]=a[t+1];
        b[i].no=i;
    }
    sort(b+1,b+m+1,com1);//按gold排序
    b[0].bc=1;b[0].gold=b[0].medal=b[0].gm=b[0].mm=-1;
    for(i=1;i&lt;=m;i++){
        if(b[i].gold==b[i-1].gold){b[i].bc=b[i-1].bc;} //处理相同名次的
        else b[i].bc=i;
        if(b[i].pm&gt;b[i].bc){b[i].pm=b[i].bc;b[i].fs=1;}
    }
    sort(b+1,b+m+1,com2);//按medal排序
    for(i=1;i&lt;=m;i++){
        if(b[i].medal==b[i-1].medal){b[i].bc=b[i-1].bc;}
        else b[i].bc=i;
        if(b[i].pm&gt;b[i].bc){b[i].pm=b[i].bc;b[i].fs=2;}
    }
    sort(b+1,b+m+1,com3);//按gm排序
    for(i=1;i&lt;=m;i++){
        if(b[i].gm==b[i-1].gm){b[i].bc=b[i-1].bc;}
        else b[i].bc=i;
        if(b[i].pm&gt;b[i].bc){b[i].pm=b[i].bc;b[i].fs=3;}
    }
    sort(b+1,b+m+1,com4);//按mm排序
    for(i=1;i&lt;=m;i++){
        if(b[i].mm==b[i-1].mm){b[i].bc=b[i-1].bc;}
        else b[i].bc=i;
        if(b[i].pm&gt;b[i].bc){b[i].pm=b[i].bc;b[i].fs=4;}
    }
    sort(b+1,b+m+1,com5);//按no排序
    for(i=1;i&lt;=m;i++)
        printf("%d:%d\n",b[i].pm,b[i].fs);
    printf("\n");
}
return 0;
</code></pre>

<p>}
{% endcodeblock %}</p>

<h3>D题：最短路径问题（hdoj3790）（九度1008）</h3>


<p>双重最短路问题，用dijkstra算法（模板题）。代码如下：</p>


<p>{% codeblock Problem D %}</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;memory.h></h1>

<h1>define INF 0x1fffffff</h1>

<h1>define N 1000</h1>

<p>int m,n,s,t,g[N][N][2],lp[N],lc[N],v[N];
void dijkstra(){</p>

<pre><code>int i,j,k,md,mp;
memset(v,0,sizeof(v));
memset(lp,0,sizeof(lp));
memset(lc,0,sizeof(lc));
for(i=0;i&lt;n;i++)lp[i]=g[s][i][0];
for(i=0;i&lt;n;i++)lc[i]=g[s][i][1];
v[s]=1;
for(i=0;i&lt;n;i++){
    k=-1;md=INF;mp=INF;
    for(j=0;j&lt;n;j++)
        if(!v[j]){
            if(lp[j]&lt;md){k=j;md=lp[j];mp=lc[j];}
            else if(lp[j]==md&amp;&amp;lc[j]&lt;mp){k=j;mp=lc[j];}
        }
    if(k==t)return;
    v[k]=1;
    for(j=0;j&lt;n;j++)
        if(lp[j]&gt;lp[k]+g[k][j][0]){
            lp[j]=lp[k]+g[k][j][0];
            lc[j]=lc[k]+g[k][j][1];
        }else if(lp[j]==lp[k]+g[k][j][0]&amp;&amp;lc[j]&gt;lc[k]+g[j][k][1]){
            lp[j]=lp[k]+g[k][j][0];
            lc[j]=lc[k]+g[k][j][1];
        }
}
</code></pre>

<p>}
int main()
{</p>

<pre><code>int i,j,a,b,d,p;
while(scanf("%d %d",&amp;n,&amp;m)!=EOF){
    if(m==0&amp;&amp;n==0)break;
    for(i=0;i&lt;n;i++)
        for(j=0;j&lt;n;j++)
            g[i][j][0]=g[i][j][1]=INF;


    for(i=0;i&lt;m;i++){
        scanf("%d %d %d %d",&amp;a,&amp;b,&amp;d,&amp;p);
        a--;b--;
        if(g[a][b][0]&gt;d){
            g[a][b][0]=g[b][a][0]=d;
            g[a][b][1]=g[b][a][1]=p;
        }
    }
    scanf("%d %d",&amp;s,&amp;t);
    s--;t--;
    dijkstra();
    printf("%d %d\n",lp[t],lc[t]);
}
return 0;
</code></pre>

<p>}
{% endcodeblock %}</p>

<h3>E题：二叉搜索树（hdoj3791）（九度1009）</h3>


<p>题目给的数据的范围很小，一开始就考虑用数组来存储树，提交后RE了。
没办法，改用指针实现，果断AC了，代码如下：</p>


<p>{% codeblock Problem E %}</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;string.h></h1>

<p>typedef struct node{</p>

<pre><code>int data;
struct node *lchild,*rchild;
</code></pre>

<p>}btnode,<em>btree;
int n;
btree ta,tb;
void creat(char s[],btree </em>t){</p>

<pre><code>int i,k;
btree p,q;
if(s[0]=='\0'){t=NULL;return;}
*t=(btree)malloc(sizeof(btnode));
(*t)-&gt;data=s[0]-'0';
(*t)-&gt;lchild=(*t)-&gt;rchild=NULL;
i=1;
while(s[i]){
    k=s[i]-'0';
    p=*t;
    while(p){
        q=p;
        if(k&lt;p-&gt;data) p=p-&gt;lchild;
        else p=p-&gt;rchild;
    }
    p=(btree)malloc(sizeof(btnode));
    p-&gt;data=k;
    p-&gt;lchild=p-&gt;rchild=NULL;
    if(k&lt;q-&gt;data)q-&gt;lchild=p;
    else q-&gt;rchild=p;
    i++;
}
</code></pre>

<p>}
int cmp(btree ta,btree tb){</p>

<pre><code>btree p,q;
p=ta;q=tb;
if((p&amp;&amp;!q)||(q&amp;&amp;!p)||(p&amp;&amp;q&amp;&amp;p-&gt;data!=q-&gt;data))return 0;
if(p&amp;&amp;q&amp;&amp;p-&gt;data==q-&gt;data)
    if(!cmp(p-&gt;lchild,q-&gt;lchild)||!cmp(p-&gt;rchild,q-&gt;rchild))
        return 0;
return 1;
</code></pre>

<p>}
int main()
{</p>

<pre><code>char str[12];
int i,la,lb;
while(scanf("%d",&amp;n)&amp;&amp;n!=0){
    scanf("%s",str);
    la=strlen(str);
    creat(str,&amp;ta);
    for(i=0;i&lt;n;i++){
        scanf("%s",str);
        lb=strlen(str);
        if(lb!=la){printf("NO\n");continue;}
        creat(str,&amp;tb);
        if(cmp(ta,tb))printf("YES\n");
        else printf("NO\n");
    }
}
return 0;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>小结：个人感觉，整套题目是这几年来最难得，只因为B题难读懂，C题题意容易误读，
D题的双重最短路初次做，表示不会，E题的测试数据又不按题目要求给，很坑爹啊！
如果不幸在10年考的话，估计结局会很悲剧了。</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[09年浙大复试机试题解]]></title>
    <link href="http://ibillxia.github.com/blog/2012/03/05/09-zju-program-test-solution/"/>
    <updated>2012-03-05T16:48:00+08:00</updated>
    <id>http://ibillxia.github.com/blog/2012/03/05/09-zju-program-test-solution</id>
    <content type="html"><![CDATA[<p>
09年浙大研究生复试机试题解
</p>




<h3>A题：xxx定律（hdoj3782）（九度1031）</h3>


<p>水题，直接上代码：</p>


<p>{% codeblock Problem A %}</p>

<h1>include &lt;stdio.h></h1>

<p>int main()
{</p>

<pre><code>int n,cnt;
while(scanf("%d",&amp;n)&amp;&amp;n!=0){
    if(n==1){printf("0\n");continue;}
    cnt=0;
    while(n!=1){
        if(n%2)n=(3*n+1)&gt;&gt;1;
        else n=n&gt;&gt;1;
        cnt++;
    }
    printf("%d\n",cnt);
}
return 0;
</code></pre>

<p>}
{% endcodeblock %}</p>

<!-- more -->


<h3>B题：ZOJ（hdoj3783）（九度1032）</h3>


<p>继续水题</p>


<p>{% codeblock Problem B %}</p>

<h1>include &lt;stdio.h></h1>

<p>char s[102];
int main()
{</p>

<pre><code>int i,z,o,j;
while(scanf("%s",s)){
    if(s[0]=='E')break;
    z=o=j=0;
    for(i=0;s[i]!=0;i++){
        switch(s[i]){
            case 'Z':z++;break;
            case 'O':o++;break;
            case 'J':j++;break;
        }
    }
    while(i){
        if(z){printf("Z");z--;}
        if(o){printf("O");o--;}
        if(j){printf("J");j--;}
        i--;
    }
    printf("\n");
}
return 0;
</code></pre>

<p>}
{% endcodeblock %}</p>

<h3>C题：继续xxx定律（hdoj3784）（九度1033）</h3>


<p>题目不是很好懂，但只要认真看题目，还是不是很难的，值得注意的是，
如果在前面是关简数，而后面却是作为覆盖数的数，一律当做覆盖数而不是关键数。
代码如下：</p>


<p>{% codeblock Problem C %}</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;memory.h></h1>

<p>int n,a[510];
char b[1002];
int main()
{</p>

<pre><code>int i,t;
while(scanf("%d",&amp;n)!=EOF){
    if(n==0)continue;
    memset(a,0,sizeof(a));
    memset(b,0,sizeof(b));
    for(i=0;i&lt;n;i++)scanf("%d",a+i);
    for(i=0;i&lt;n;i++){
        t=a[i];
        if(t==1||b[t])continue;
        while(t!=1){
            if(t%2)t=(3*t+1)&gt;&gt;1;
            else t=t&gt;&gt;1;
            if(t&lt;1002)b[t]=1;
        }
    }
    i--;t=0;
    while(i&gt;=0){
        if(t &amp;&amp; !b[a[i]])printf(" ");
        if(!b[a[i]]){printf("%d",a[i]);t=1;}
        i--;
    }
    if(t)printf("\n");
}
return 0;
</code></pre>

<p>}
{% endcodeblock %}</p>

<h3>D题：寻找大富翁（hdoj3785）（九度1034）</h3>


<p>水题，注意不要进行排序，不然就可能会超时。</p>


<p>{% codeblock Problem D %}</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;memory.h></h1>

<p>int m,n,a[100002],b[10];
int main()
{</p>

<pre><code>int i,j,k;
while(scanf("%d %d",&amp;n,&amp;m)){
    if(m==0&amp;&amp;n==0)break;
    for(i=0;i&lt;n;i++)scanf("%d",a+i);
    memset(b,0,sizeof(b));
    for(i=0;i&lt;n;i++){
        for(j=0;j&lt;m;j++)
            if(a[i]&gt;=b[j]){
                for(k=m-1;k&gt;j;k--)b[k]=b[k-1];
                b[j]=a[i];
                break;
            }
    }
    for(i=0;i&lt;m-1;i++)
        printf("%d ",b[i]);
    printf("%d\n",b[i]);
}
return 0;
</code></pre>

<p>}
{% endcodeblock %}</p>

<h3>E题：找出直系血亲（hdoj3786）（九度1035）</h3>


<p>水题，直接用DFS即可</p>


<p>{% codeblock Problem E %}</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;memory.h></h1>

<p>int m,n;
char tree[27];
int dfs(char a,char b){</p>

<pre><code>int dp;
char t;
dp=0;
t=a;
while(t){
    dp++;
    t=tree[t];
    if(t==b)return dp;
}
return 0;
</code></pre>

<p>}
int main()
{</p>

<pre><code>int i,d;
char s[4];
while(scanf("%d %d",&amp;n,&amp;m)){
    if(m==0&amp;&amp;n==0)break;
    memset(tree,0,sizeof(tree));
    for(i=0;i&lt;n;i++){
        scanf("%s",s);
        if(s[1]!='-')tree[s[1]-64]=s[0]-64;
        if(s[2]!='-')tree[s[2]-64]=s[0]-64;
    }
    for(i=0;i&lt;m;i++){
        scanf("%s",s);
        d=dfs(s[0]-64,s[1]-64);
        if(!d)d=-dfs(s[1]-64,s[0]-64);
        if(!d){printf("-\n");continue;}
        while(d&gt;2||d&lt;-2){
            printf("great-");
            if(d&gt;0)d--;
            else d++;
        }
        switch(d){
            case 2:printf("grandparent\n");break;
            case 1:printf("parent\n");break;
            case -1:printf("child\n");break;
            case -2:printf("grandchild\n");break;
        }
    }
}
return 0;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>小结：除了C题题目有点费解外，其他题都不难，可以说是既没考图论，又没有考DP。</p>



]]></content>
  </entry>
  
</feed>
