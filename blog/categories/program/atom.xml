<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Program | Bill's Blog]]></title>
  <link href="http://ibillxia.github.io/blog/categories/program/atom.xml" rel="self"/>
  <link href="http://ibillxia.github.io/"/>
  <updated>2013-11-11T23:16:00+08:00</updated>
  <id>http://ibillxia.github.io/</id>
  <author>
    <name><![CDATA[Bill Xia]]></name>
    <email><![CDATA[ibillxia@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PCM WAVE格式详解及用C语言实现wave文件的读取]]></title>
    <link href="http://ibillxia.github.io/blog/2013/07/20/details-of-wave-format-and-reading-wave-files-in-C-language/"/>
    <updated>2013-07-20T20:07:00+08:00</updated>
    <id>http://ibillxia.github.io/blog/2013/07/20/details-of-wave-format-and-reading-wave-files-in-C-language</id>
    <content type="html"><![CDATA[<h2>1.PCM Wave格式详解</h2>


<p>WAVE文件格式是微软RIFF(Resource Interchange File Format,资源交换文件标准)的一种，是针对于多媒体文件存储的一种文件格式和标准。
一般而言，RIFF文件由文件头和数据两部分组成，一个WAVE文件由一个“WAVE”数据块组成，这个“WAVE”块又由一个"fmt"子数据块和一个“data”子
数据块组成，也称这种格式为“Canonical form”（权威/牧师格式），如下图所示：
<center>{% img /images/2013/IMAG2013072001.gif %}</center>
</p>


<!--more-->


<p>每个字段的涵义如下：
ChunkID: 占4个字节，内容为“RIFF”的ASCII码(0x52494646)，以大端（big endian）存储。</br>
ChunkSize: 4字节，存储整个文件的字节数（不包含ChunkID和ChunkSize这8个字节），以小端（little endian）方式存储。</br>
Format: 4字节，内容为“WAVE”的ASCII码(0x57415645)，以大端存储。</br>
</p>




<p>
其中bigendian 主要有一个特征，在内存中对操作数的存储方式和从高字节到低字节。例如：0x1234，这样一个数，存储为:</br>
0x4000:   0x12</br>
0x4001:   0x34</br>
而小尾端littleendian是：</br>
0x4000:   0x34</br>
0x4001:   0x12</br>
用程序在区别的话，可以考虑：
{% codeblock %}
#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{
       union w
      {
       short int a;
       char b;
      }c;
      c.a=1;
      if( c.b==1 )  printf("little endian\n");
      else printf("big endian\n");
      system("PAUSE"); 
      return 0;
}
{% endcodeblock %}
</p>




<p>"WAVE"格式由两个子数据块构成：“fmt”块和“data”块，其中“fmt”块的详细解释如下：
Subchunk1ID: 占4个字节，内容为“fmt ”的ASCII码(0x666d7420)，以大端存储。</br>
Subchunk1Size: 占4个字节，存储该子块的字节数（不含前面的Subchunk1ID和Subchunk1Size这8个字节），以小端方式存储。</br>
AudioFormat：占2个字节，以小端方式存储，存储音频文件的编码格式，例如若为PCM则其存储值为1，若为其他非PCM格式的则有一定的压缩。</br>
NumChannels: 占2个字节，以小端方式存储，通道数，单通道(Mono)值为1，双通道(Stereo)值为2，等等。</br>
SampleRate: 占4个字节，以小端方式存储，采样率，如8k，44.1k等。</br>
ByteRate: 占4个字节，以小端方式存储，每秒存储的bit数，其值=SampleRate * NumChannels * BitsPerSample/8</br>
BlockAlign: 占2个字节，以小端方式存储，块对齐大小，其值=NumChannels * BitsPerSample/8</br>
BitsPerSample: 占2个字节，以小端方式存储，每个采样点的bit数，一般为8,16,32等。</br>
接下来是两个可选的扩展参数：</br>
ExtraParamSize: 占2个字节，表示扩展段的大小。</br>
ExtraParams: 扩展段其他自定义的一些参数的具体内容，大小由前一个字段给定。
</p>




<p>其中，对于每个采样点的bit数，不同的bit数读取数据的方式不同：
{% codeblock %}
// data 为读取到的采样点的值，speech为原始数据流，
//对应于下面的"WAVE"格式文件的第二个子数据块“data”块的“Data”部分。
for(i=0;i<NumSample;i++){
    if(BitsPerSample==8)
        data[i] = (int)*((char*)speech+i);
    else if(BitsPerSample==16)
        data[i] = (int)*((short*)speech+i);
    else if(BitsPerSample==32)
        data[i] = (int)*((int*)speech+i);
}
{% endcodeblock %}
</p>




<p>"WAVE"格式文件的第二个子数据块是“data”，其个字段的详细解释如下：</br>
Subchunk2ID: 占4个字节，内容为“data”的ASCII码(0x64617461)，以大端存储。</br>
Subchunk2Size: 占4个字节，内容为接下来的正式的数据部分的字节数，其值=NumSamples * NumChannels * BitsPerSample/8</br>
Data: 真正的语音数据部分。</br>
</p>




<h2>一个Wave文件头的实例</h2>


<p>设一个wave文件的前72个字节的十六进制内容如下(可以使用Ultra Edit等工具查看wave文件头)：
{% codeblock %}
52 49 46 46 24 08 00 00 57 41 56 45 66 6d 74 20 10 00 00 00 01 00 02 00 
22 56 00 00 88 58 01 00 04 00 10 00 64 61 74 61 00 08 00 00 00 00 00 00 
24 17 1e f3 3c 13 3c 14 16 f9 18 f9 34 e7 23 a6 3c f2 24 f2 11 ce 1a 0d 
{% endcodeblock %}
则其个字段的解析如下图：
<center>{% img /images/2013/IMAG2013072002.gif %}</center>
</p>




<h2>C语言实现wave文件的读取</h2>


<p>这里给出一个用基本的C语言文件操作库函数实现的Wave文件读取的实例代码，可以跨Windows和Linux平台。</p>


<p>{% codeblock %}</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;string.h></h1>

<p>// define Wave format structure
typedef struct tWAVEFORMATEX
{</p>

<pre><code>short wFormatTag;         /* format type */
short nChannels;          /* number of channels (i.e. mono, stereo...) */
unsigned int nSamplesPerSec;     /* sample rate */
unsigned int nAvgBytesPerSec;    /* for buffer estimation */
short nBlockAlign;        /* block size of data */
short wBitsPerSample;     /* number of bits per sample of mono data */
short cbSize;             /* the count in bytes of the size of */
                                /* extra information (after cbSize) */
</code></pre>

<p>} WAVEFORMATEX, *PWAVEFORMATEX;</p>

<p>char<em> wavread(char </em>fname, WAVEFORMATEX *wf);</p>

<p>int main(){</p>

<pre><code>char fname = "test.wav";
char *speech;
WAVEFORMATEX wf;

speech = wavread(fname, &amp;wf);
// afterward processing...

return 0;
</code></pre>

<p>}</p>

<p>// read wave file
char<em> wavread(char </em>fname, WAVEFORMATEX *wf){</p>

<pre><code>FILE* fp;
char str[32];
char *speech;
unsigned int subchunk1size; // head size
unsigned int subchunk2size; // speech data size

// check format type
fp = fopen(fname,"r");
if(!fp){
    fprintf(stderr,"Can not open the wave file: %s.\n",fname);
    return NULL;
}
fseek(fp, 8, SEEK_SET);
fread(str, sizeof(char), 7, fp);
str[7] = '\0';
if(strcmp(str,"WAVEfmt")){
    fprintf(stderr,"The file is not in WAVE format!\n");
    return NULL;
}

// read format header
fseek(fp, 16, SEEK_SET);
fread((unsigned int*)(&amp;subchunk1size),4,1,fp);
fseek(fp, 20, SEEK_SET);
fread(wf, subchunk1size, 1, fp);

// read wave data
fseek(fp, 20+subchunk1size, SEEK_SET);
fread(str, 1, 4, fp);
str[4] = '\0';
if(strcmp(str,"data")){
    fprintf(stderr,"Locating data start point failed!\n");
    return NULL;
}
fseek(fp, 20+subchunk1size+4, SEEK_SET);
fread((unsigned int*)(&amp;subchunk2size), 4, 1, fp);
speech = (char*)malloc(sizeof(char)*subchunk2size);
if(!speech){
    fprintf(stderr, "Memory alloc failed!\n");
    return NULL;
}
fseek(fp, 20+subchunk1size+8, SEEK_SET);
fread(speech, 1, subchunk2size, fp);

fclose(fp);
return speech;
</code></pre>

<p>}
{% endcodeblock %}</p>

<h2>参考</h2>


<p>
[1]WAVE PCM soundfile format: https://ccrma.stanford.edu/courses/422/projects/WaveFormat/ </br>
[2]Resource Interchange File Format: http://en.wikipedia.org/wiki/Resource_Interchange_File_Format </br>
[3]基于Visual C++6.0的声音文件操作: http://www.yesky.com/20030414/1663116_1.shtml
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给Octpress博客添加返回顶部按钮]]></title>
    <link href="http://ibillxia.github.io/blog/2013/06/30/add-a-back-to-top-button-on-ur-octpress-blog/"/>
    <updated>2013-06-30T10:47:00+08:00</updated>
    <id>http://ibillxia.github.io/blog/2013/06/30/add-a-back-to-top-button-on-ur-octpress-blog</id>
    <content type="html"><![CDATA[<p>有时候，博客文章太长，需要返回顶部时，需要用鼠标拖着滚动条向上好半天，这里提供一个用jQuery来实现的动态上滚的示例。
这个示例完全参考和翻译自webdesignerwall的blog：<a href="http://webdesignerwall.com/tutorials/animated-scroll-to-top">http://webdesignerwall.com/tutorials/animated-scroll-to-top</a>，
其中有部分删改，并在本人的blog上实现。</p>




<p>主要包含HTML和CSS的设计，基于jQuery的JS的设计。另外还有一点小trick</p>




<h2>Design & CSS</h2>


<p>相关的HTML代码很简单，在source/_include/custom/footer.html中添加如下代码：
{% codeblock %}
    <p id = "back-top">
        <a href="#top"><span></span>Back to Top</a>
    </p>
{% endcodeblock %}
</p>




<!--more-->




<p>对应的CSS样式的设置如下：（这段代码同样的放在source/_include/custom/footer.html文件中）
{% codeblock %}
<style type="text/css">
#back-top {
    position: fixed;
    bottom: 50px;
    right: 100px;
}

#back-top a {
    width: 80px;
    display: block;
    text-align: center;
    font: 11px/100% Arial, Helvetica, sans-serif;
    text-transform: uppercase;
    text-decoration: none;
    color: #bbb;

    /* transition */
    -webkit-transition: 1s;
    -moz-transition: 1s;
    transition: 1s;
}
#back-top a:hover {
    color: #000;
}

/* arrow icon (span tag) */
#back-top span {
    width: 80px;
    height: 80px;
    display: block;
    margin-bottom: 7px;
    background: #ddd url(../../images/up-arrow.png) no-repeat center center;

    /* rounded corners */
    -webkit-border-radius: 15px;
    -moz-border-radius: 15px;
    border-radius: 15px;

    /* transition */
    -webkit-transition: 1s;
    -moz-transition: 1s;
    transition: 1s;
}
/*
#back-top a:hover span {
    background-color: #888;
}
*/
</style>
{% endcodeblock %}
</p>




<p>上面的css中用到了一张图片up-arrow.png，放在source/images/目录下，图片如下：
<center>{% img /images/up-arrow.png %}</center>
这是从google image里面随便找的一个，你也可以找一个自己喜欢的图片。
</p>




<h2>jQuery部分</h2>


<p>HTML和CSS样式设置好了之后，最后就是添加JavaScript事件响应代码了，这里是基于jQuery实现的。代码如下：（这段代码还是放在source/_include/custom/footer.html文件中）
{% codeblock %}
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.3/jquery.min.js"></script>
<script type="text/javascript">
$(document).ready(function(){

    // hide #back-top first
    $("#back-top").hide();
    
    // fade in #back-top
    $(function () {
        $(window).scroll(function () {
            if ($(this).scrollTop() > 100) {
                $('#back-top').fadeIn();
            } else {
                $('#back-top').fadeOut();
            }
        });

        // scroll body to 0px on click
        $('#back-top a').click(function () {
            $('body,html').animate({
                scrollTop: 0
            }, 800);
            return false;
        });
    });

});
</script>
{% endcodeblock %}
</p>




<h2>一个Trick</h2>


<p>
在上面的HTML代码中，我们将一个链接添加到了ID为#top的里面，这个#top标签是<body>标签的ID，这样即使浏览器不支持相关的JS，
通过这个link也实现了返回顶部的功能。
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Windows API实现一个简单的录音程序]]></title>
    <link href="http://ibillxia.github.io/blog/2013/06/04/a-simple-code-for-wave-recording-using-windows-api/"/>
    <updated>2013-06-04T23:59:00+08:00</updated>
    <id>http://ibillxia.github.io/blog/2013/06/04/a-simple-code-for-wave-recording-using-windows-api</id>
    <content type="html"><![CDATA[<p>本文介绍如何使用Windows API来录制语音信号兵保存到wave文件中，主要用到三个结构体和几个wave开头的API函数（在Winmm.lib文件中）。其中三个结构体是WAVEFORMATEX、WAVEHDR、MMTIME，其详细定义都在MMSystem.h中定义，
可以转到定义看其详细内容及每一项的英文注释。用到的API函数的详细用法可以参见MSDN： http://msdn.microsoft.com/en-us/library/windows/desktop/dd743847(v=vs.85).aspx
详细的使用过程请看下文的源代码，这是一个Win32 Application，需要手动添加Winmm.lib的依赖。</p>




<!--more-->




<p>实例程序</p>


<p>{% codeblock %}
// <strong><strong><strong><strong><strong><strong><strong><strong><strong><em> FileName: WinMain.cpp </em></strong></strong></strong></strong></strong></strong></strong></strong></strong>**********
// 该源程序需要加入到 VC6 的 Win32 Application 的 empty Project 中
// 对于工程的 Link 选项，至少要包含以下库: msvcrt.lib Winmm.lib</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;atlstr.h></h1>

<h1>include &lt;windows.h></h1>

<h1>include &lt;Mmsystem.h></h1>

<h1>pragma comment(lib,"Winmm.lib")</h1>

<p>char lpTemp[256];</p>

<p>DWORD FCC(LPSTR lpStr)
{</p>

<pre><code>DWORD Number = lpStr[0] + lpStr[1] *0x100 + lpStr[2] *0x10000 + lpStr[3] *0x1000000 ;
return Number;
</code></pre>

<p>}</p>

<p>int WINAPI WinMain( HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow )
{</p>

<pre><code>DWORD datasize = 48000;

// 设置录音采样参数
WAVEFORMATEX waveformat;
waveformat.wFormatTag=WAVE_FORMAT_PCM; // 指定录音格式
waveformat.nChannels=1;
waveformat.nSamplesPerSec=8000;
waveformat.nBlockAlign=1;
waveformat.wBitsPerSample=8;
waveformat.cbSize=0;
waveformat.nAvgBytesPerSec=waveformat.nSamplesPerSec*waveformat.wBitsPerSample/8;

sprintf(lpTemp,"WAVEFORMATEX size = %lu", sizeof(WAVEFORMATEX));
MessageBox(NULL,CString(lpTemp),CString("提示"),MB_OK);

HWAVEIN m_hWaveIn;
if ( !waveInGetNumDevs() )
{
    MessageBox(NULL,CString("没有可以使用的 WaveIn 通道"),CString("提示"),MB_OK);
    return 0;
}

// 打开录音设备
int res = waveInOpen(&amp;m_hWaveIn,WAVE_MAPPER, &amp;waveformat, (DWORD)NULL,0L,CALLBACK_WINDOW); 
if ( res != MMSYSERR_NOERROR )
{
   sprintf(lpTemp, "打开 waveIn 通道失败，Error_Code = 0x%x", res );
   MessageBox(NULL,CString(lpTemp),CString("提示"),MB_OK);
   return 0;
}

WAVEHDR m_pWaveHdr;
m_pWaveHdr.lpData = (char *)GlobalLock( GlobalAlloc(GMEM_MOVEABLE|GMEM_SHARE, datasize) );
memset(m_pWaveHdr.lpData, 0, datasize );
m_pWaveHdr.dwBufferLength = datasize;
m_pWaveHdr.dwBytesRecorded = 0;
m_pWaveHdr.dwUser = 0;
m_pWaveHdr.dwFlags = 0;
m_pWaveHdr.dwLoops = 0;
sprintf( lpTemp, "WAVEHDR size = %lu", sizeof(WAVEHDR) );
MessageBox(NULL,CString(lpTemp),CString("提示"),MB_OK);

// 准备内存块录音
int resPrepare = waveInPrepareHeader( m_hWaveIn, &amp;m_pWaveHdr, sizeof(WAVEHDR) ); 
if ( resPrepare != MMSYSERR_NOERROR) 
{
    sprintf(lpTemp, "不能开辟录音头文件，Error_Code = 0x%03X", resPrepare );
    MessageBox(NULL,CString(lpTemp),CString("提示"),MB_OK);
    return 0;
}

resPrepare = waveInAddBuffer( m_hWaveIn, &amp;m_pWaveHdr, sizeof(WAVEHDR) );
if ( resPrepare != MMSYSERR_NOERROR) 
{
    sprintf(lpTemp, "不能开辟录音用缓冲，Error_Code = 0x%03X", resPrepare );
    MessageBox(NULL,CString(lpTemp),CString("提示"),MB_OK);
    return 0;
}

if (! waveInStart(m_hWaveIn) ) 
{
    MessageBox(NULL,CString("开始录音"),CString("提示"),MB_OK);
}
else 
{
    MessageBox(NULL,CString("开始录音失败"),CString("提示"),MB_OK);
    return 0;
}
Sleep(30000);

MMTIME mmt;
mmt.wType = TIME_BYTES;
sprintf( lpTemp, "sizeof(MMTIME) = %d, sizeof(UINT) = %d", sizeof(MMTIME), sizeof(UINT) );
MessageBox(NULL,CString(lpTemp),CString("提示"),MB_OK);

if (! waveInGetPosition(m_hWaveIn, &amp;mmt, sizeof(MMTIME)) )
{
    MessageBox(NULL,CString("取得现在音频位置"),CString("提示"),MB_OK);
}
else 
{
    MessageBox(NULL,CString("不能取得音频长度"),CString("提示"),MB_OK);
    return 0;
}

if (mmt.wType != TIME_BYTES) 
{
    MessageBox(NULL,CString("指定的 TIME_BYTES 格式音频长度不支持"),CString("提示"),MB_OK);
    return 0;
}

if (! waveInStop(m_hWaveIn) ) 
{
    MessageBox(NULL,CString("停止录音"),CString("提示"),MB_OK);
}
else  
{
    MessageBox(NULL,CString("停止录音失败"),CString("提示"),MB_OK);
}

if ( waveInReset(m_hWaveIn) ) 
{
    MessageBox(NULL,CString("重置内存区失败"),CString("提示"),MB_OK);
    return 0;
}

m_pWaveHdr.dwBytesRecorded = mmt.u.cb;
DWORD NumToWrite=0;
DWORD dwNumber = 0;
HANDLE FileHandle = CreateFile( CString("myTest.wav"), GENERIC_WRITE, 
    FILE_SHARE_READ, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);

// memset(m_pWaveHdr.lpData, 0, datasize);
dwNumber = FCC("RIFF");
WriteFile(FileHandle, &amp;dwNumber, 4, &amp;NumToWrite, NULL);
dwNumber = m_pWaveHdr.dwBytesRecorded + 18 + 20;
WriteFile(FileHandle, &amp;dwNumber, 4, &amp;NumToWrite, NULL);
dwNumber = FCC("WAVE");
WriteFile(FileHandle, &amp;dwNumber, 4, &amp;NumToWrite, NULL);
dwNumber = FCC("fmt ");
WriteFile(FileHandle, &amp;dwNumber, 4, &amp;NumToWrite, NULL);
dwNumber = 18L;
WriteFile(FileHandle, &amp;dwNumber, 4, &amp;NumToWrite, NULL);
WriteFile(FileHandle, &amp;waveformat, sizeof(WAVEFORMATEX), &amp;NumToWrite, NULL);
dwNumber = FCC("data");
WriteFile(FileHandle, &amp;dwNumber, 4, &amp;NumToWrite, NULL);
dwNumber = m_pWaveHdr.dwBytesRecorded;
WriteFile(FileHandle, &amp;dwNumber, 4, &amp;NumToWrite, NULL);
WriteFile(FileHandle, m_pWaveHdr.lpData, m_pWaveHdr.dwBytesRecorded, &amp;NumToWrite, NULL);
SetEndOfFile(FileHandle);
CloseHandle( FileHandle );  
FileHandle = INVALID_HANDLE_VALUE; // 收尾关闭句柄
MessageBox(NULL,CString("应该已生成 myTest.wav 文件"),CString("提示"),MB_OK);

if ( waveInUnprepareHeader(m_hWaveIn, &amp;m_pWaveHdr, sizeof(WAVEHDR)) ) 
{
    MessageBox(NULL,CString("Un_Prepare Header 失败"),CString("提示"),MB_OK);
}
else 
{
    MessageBox(NULL,CString("Un_Prepare Header 成功"),CString("提示"),MB_OK);
    return 0;
}

if ( GlobalFree(GlobalHandle( m_pWaveHdr.lpData )) ) 
{
    MessageBox(NULL,CString("Global Free 失败"),CString("提示"),MB_OK);
}
else 
{
    MessageBox(NULL,CString("Global Free 成功"),CString("提示"),MB_OK);
    return 0;
}

if (res == MMSYSERR_NOERROR ) // 关闭录音设备
{
    if (waveInClose(m_hWaveIn)==MMSYSERR_NOERROR)
    {
        MessageBox(NULL,CString("正常关闭录音设备"),CString("提示"),MB_OK);
    }
    else
    {
        MessageBox(NULL,CString("非正常关闭录音设备"),CString("提示"),MB_OK);
        return 0;
    }
}

return 0;
</code></pre>

<p>}
// <strong><strong><strong><strong><strong><strong><strong><strong><strong><em> End of File </em></strong></strong></strong></strong></strong></strong></strong></strong></strong>*****
{% endcodeblock %}</p>

<p>这里提供的代码有点杂乱，现已整理成一个小的接口，并提供了一个简单的示例，放在GitHub上：https://github.com/ibillxia/Demo/tree/master/DemoSpeechRecord</p>




<p>参考：</br>
[1]MSDN: http://msdn.microsoft.com/en-us/library/windows/desktop/dd743586(v=vs.85).aspx</br>
[2]基于API的录音机程序: http://www.vckbase.com/index.php/wv/664
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matlab代码优化方法几则]]></title>
    <link href="http://ibillxia.github.io/blog/2012/04/25/matlab-code-optimization/"/>
    <updated>2012-04-25T20:07:00+08:00</updated>
    <id>http://ibillxia.github.io/blog/2012/04/25/matlab-code-optimization</id>
    <content type="html"><![CDATA[<p>1.计算向量、矩阵化，尽量减少for循环</br>
因为MATLAB本来就是矩阵实验室的意思，他提供了极其强大而灵活的矩阵运算能力，你就没必要自己再用自己编写的for循环去实现矩阵运算的功能了。
另外由于matlab是一种解释性语言，所以最忌讳直接使用循环语句。但在有些情况下，使用for循环可以提高程序的易读性，在效率提高不是很明显的
情况下可以选择使用for循环。</p>




<p>2.循环内大数组预先定义--预先分配空间</br>
这一点原则是极其重要的，以至于在编写m程序时编辑器会给出提示“'ver' might be growing inside a loop.Consider prealloacting for speed.”</p>




<p>3.尽可能利用matlab内部提供的函数</br>
因为matlab内部提供的函数绝对是各种问题的最优算法，那写程序都是他们大师级人物写出来的，程序应该说相当高效，有现成的为什么不用那！
这个原则就不用实际的程序测试了。</p>




<p>4. 利用内置函数自动记录运行结果</br>
matlab生成的结果变量只贮存在内存空间中，一旦matlab关闭则会丢失，很多时候需要手工将这些结果存储到我们需要的文件中。事实上，matlab提供
了很多函数可以自动记录结果，如fprintf可以将数据写入txt文件，xlswrite可以将数据写入excel文件等等。这样自动化的命令可以缩减大量时间，
从而提高效率。</p>




<p>5. 在迫不得已要使用较多循环而每一步都很耗时的时候，可以将每一步的结果保存成mat文件，然后在循环的开头用if语句与exist函数进行判断，
如果该文件存在的话，就直接进入下一次循环。这样做的好处是不会因为断电、电脑死机或误操作等原因而重头从第一个循环再次运行。</p>




<p>6. 同时运行多的matlab进程。现在的电脑一般都是多核，一般一个matlab进程会占用一个cpu，因此可以在多核电脑上同时打开多个matlab窗口，
从而执行不同的命令。如四核电脑上可以打开三个matlab窗口分别运行不同的程序，cpu的占用率约为80%，这样既加快了进度，又不会影响电脑的使用。</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[11年浙大复试机试题解]]></title>
    <link href="http://ibillxia.github.io/blog/2012/03/07/11-zju-program-test-solution/"/>
    <updated>2012-03-07T19:56:00+08:00</updated>
    <id>http://ibillxia.github.io/blog/2012/03/07/11-zju-program-test-solution</id>
    <content type="html"><![CDATA[<p>
11年浙大研究生复试机试题解
</p>




<h3>A题：A+B for Matrices （ 九度1001）</h3>


<p>水题</p>


<p>{% codeblock Problem A %}</p>

<h1>include &lt;stdio.h></h1>

<p>int m,n,a[10][10],b[10][10];
int main()
{</p>

<pre><code>int i,j,cnt;
while(scanf("%d",&amp;m)&amp;&amp;m&gt;0){
    scanf("%d",&amp;n);
    for(i=0;i&lt;m;i++)
        for(j=0;j&lt;n;j++)
            scanf("%d",a[i]+j);
    for(i=0;i&lt;m;i++)
        for(j=0;j&lt;n;j++){
            scanf("%d",b[i]+j);
            a[i][j]+=b[i][j];
        }
    cnt=0;
    for(i=0;i&lt;m;i++){
        for(j=0;j&lt;n;j++)
            if(a[i][j])break;
        if(j==n)cnt++;
    }
    for(i=0;i&lt;n;i++){
        for(j=0;j&lt;m;j++)
            if(a[j][i])break;
        if(j==m)cnt++;
    }
    printf("%d\n",cnt);
}
return 0;
</code></pre>

<p>}
{% endcodeblock %}</p>

<!-- more -->


<h3>B题：Grading（ 九度 1002 ）</h3>


<p>继续水题！</p>


<p>{% codeblock Problem B %}</p>

<h1>include &lt;stdio.h></h1>

<p>int main()
{</p>

<pre><code>int p,t,g1,g2,g3,gj,t1,t2;
while(scanf("%d %d %d %d %d %d",&amp;p,&amp;t,&amp;g1,&amp;g2,&amp;g3,&amp;gj)!=EOF){
    if(g1-g2&lt;=t&amp;&amp;g2-g1&lt;=t){printf("%.1f\n",(g1+g2)/2.0);continue;}
    t1=g3&gt;g1 ? g3-g1 : g1-g3;
    t2=g3&gt;g2 ? g3-g2 : g2-g3;
    if(t1&gt;t&amp;&amp;t2&gt;t){printf("%.1f\n",(float)gj);continue;}
    if(t1&lt;=t&amp;&amp;t2&lt;=t) {
        if(g1&lt;g2)g1=g2;
        if(g1&lt;g3)g1=g3;
        printf("%.1f\n",(float)g1);
        continue;
    }
    if(t1&gt;t2)printf("%.1f\n",(g2+g3)/2.0);
    else printf("%.1f\n",(g1+g3)/2.0);
}
return 0;
</code></pre>

<p>}
{% endcodeblock %}</p>

<h3>C题：Median（ 九度 1004）</h3>


<p>再继续水题！</p>


<p>{% codeblock Problem C %}</p>

<h1>include &lt;stdio.h></h1>

<p>long m,n,a[1000000],b[1000000];
int main()
{</p>

<pre><code>int i,j,k,t,mid;
while(scanf("%d",&amp;m)!=EOF){
    for(i=0;i&lt;m;i++)scanf("%d",a+i);
    scanf("%d",&amp;n);
    for(i=0;i&lt;n;i++)scanf("%d",b+i);
    i=j=k=0;t=(m+n+1)/2;
    while(i&lt;m&amp;&amp;j&lt;n&amp;&amp;k&lt;t){
        if(a[i]&gt;b[j]){mid=b[j];j++;}
        else {mid=a[i];i++;}
        k++;
    }
    if(i==m&amp;&amp;k&lt;t){
        while(k&lt;t){j++;k++;}
        mid=b[j-1];
    }else if(j==n&amp;&amp;k&lt;t){
        while(k&lt;t){i++;k++;}
        mid=a[i-1];
    }
    printf("%d\n",mid);
}
return 0;
</code></pre>

<p>}
{% endcodeblock %}</p>

<h3>D题：Graduate Admission（ 九度 1005）</h3>


<p>有点麻烦，要细心！</p>


<p>{% codeblock Problem D %}</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;memory.h></h1>

<p>//m为学校数，n为学生数，k为学生填报的志愿数
//mq[i][0]为学校i计划招生数，mq[i][1]为学校实际招生数，
//mq[i][2] ~ mq[i][mq[i][1]+1]为招收的学生的学号
//ng[i][0]为学生学号，ng[i][1]为学生总成绩，ng[i][2]为学生面试成绩，
//ng[i][2]后面的k个数据是填报的志愿
int m,n,k,mq[100][1000],ng[40000][8];
int cmp1(const void<em>a,const void</em>b){</p>

<pre><code>int *t1,*t2;
t1=(int*)a;t2=(int*)b;
if(t1[1]!=t2[1])return t2[1]-t1[1];
else return t1[2]-t2[2];  //总分相同时，面试成绩高的笔试成绩低
</code></pre>

<p>}
int cmp2(const void<em>a,const void</em>b){return <em>(int</em>)a-<em>(int</em>)b;}
int main()
{</p>

<pre><code>int i,j,t,p,q;
//freopen("in.txt","r",stdin);
//freopen("out.txt","w+",stdout);
while(scanf("%d %d %d",&amp;n,&amp;m,&amp;k)!=EOF){
    memset(mq,0,sizeof(mq));
    memset(ng,0,sizeof(ng));
    //输入部分
    for(i=0;i&lt;m;i++)scanf("%d",mq+i);
    for(i=0;i&lt;n;i++){
        ng[i][0]=i;
        for(j=1;j&lt;k+3;j++)
            scanf("%d",ng[i]+j);
        ng[i][1]=ng[i][1]+ng[i][2];
    }
    //处理部分
    qsort(ng,n,sizeof(ng[0]),cmp1);  //将考生按分数排名
    //debug:输出排名
    //for(i=0;i&lt;n;i++)printf("%2d:%2d %d %d %d\n",i,ng[i][0],ng[i][3],ng[i][4],ng[i][5]);
    for(i=0;i&lt;n;i++){  //将考生按名次分配给各学校
        for(j=3;j&lt;k+3;j++){ //从考生第一志愿开始选学校
            t=ng[i][j];  //排名为i的考生报考的第j-3个学校，学校编号为t
            if(mq[t][0]&gt;0){
                if(mq[t][0]&gt;mq[t][1]){   //在学校招生名额范围内
                    mq[t][1]++;
                    mq[t][mq[t][1]+1]=ng[i][0];  //学校t招收学生ng[i][0]
                    break;
                } else{   //招生名额范围外，排名相同的考生
                    p=mq[t][mq[t][1]+1];  //p为已招收的最后一个考生的学号
                    for(q=0;q&lt;i;q++)   //查找学号为p的考生排名后的位置k
                        if(ng[q][0]==p){p=q;break;}
                        if(ng[p][1]==ng[i][1]&amp;&amp;ng[p][2]==ng[i][2]){  //判断排名是否相同
                        mq[t][1]++;
                        mq[t][mq[t][1]+1]=ng[i][0];   //录取排名相同的考生
                        break;
                    }
                }
            }
        }
    }
    //输出部分
    for(i=0;i&lt;m;i++){ //分配给每个学校的学生，先按学号排序，再输出
        qsort(mq[i]+2,mq[i][1],sizeof(mq[i][2]),cmp2);
        if(mq[i][1]&gt;0)printf("%d",mq[i][2]);
        for(j=3;j&lt;mq[i][1]+2;j++)printf(" %d",mq[i][j]);
        printf("\n");
    }
}
return 0;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>总体来说，这套题比较简单！</p>



]]></content>
  </entry>
  
</feed>
